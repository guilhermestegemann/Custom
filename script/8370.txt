ALTER TABLE ITEMNF
ADD BASESUBSORIGEM DOMAIN_VALOR2D;

ALTER TABLE ITEMNF
ADD PERCSUBSORIGEM DOMAIN_VALOR3D;

ALTER TABLE ITEMNF
ADD UNITARIOSUBSORIGEM DOMAIN_VALOR6D; 

ALTER TABLE ITEMNF
ADD VALORSUBSORIGEM COMPUTED BY (CASE WHEN(QTDE > 0) AND (UNITARIOSUBSORIGEM > 0) THEN (UNITARIOSUBSORIGEM * QTDE) END);

ALTER TABLE ITEMNF
ADD BASEICMSORIGEM DOMAIN_VALOR2D;

ALTER TABLE ITEMNF
ADD PERCICMSORIGEM DOMAIN_VALOR3D;

ALTER TABLE ITEMNF
ADD UNITARIOICMSORIGEM DOMAIN_VALOR6D;

ALTER TABLE ITEMNF
ADD VALORICMSORIGEM COMPUTED BY (CASE WHEN(QTDE > 0) AND (UNITARIOICMSORIGEM > 0) THEN (UNITARIOICMSORIGEM * QTDE) END);

ALTER TABLE ITEMNF
ADD BASEIPIORIGEM DOMAIN_VALOR2D;

ALTER TABLE ITEMNF
ADD PERCIPIORIGEM DOMAIN_VALOR3D;

ALTER TABLE ITEMNF
ADD UNITARIOIPIORIGEM DOMAIN_VALOR6D;

ALTER TABLE ITEMNF
ADD VALORIPIORIGEM COMPUTED BY (CASE WHEN(QTDE > 0) AND (UNITARIOIPIORIGEM > 0) THEN (UNITARIOIPIORIGEM * QTDE) END);


ALTER TABLE NF
ADD BASESUBSORIGEM DOMAIN_VALOR2D;

ALTER TABLE NF
ADD VALORSUBSORIGEM DOMAIN_VALOR2D;

ALTER TABLE NF
ADD TOTALUNITARIOSUBSORIGEM DOMAIN_VALOR2D;;

ALTER TABLE NF
ADD BASEICMSORIGEM DOMAIN_VALOR2D;

ALTER TABLE NF
ADD VALORICMSORIGEM DOMAIN_VALOR2D;

ALTER TABLE NF
ADD TOTALUNITARIOICMSORIGEM DOMAIN_VALOR2D;

ALTER TABLE NF
ADD BASEIPIORIGEM DOMAIN_VALOR2D;

ALTER TABLE NF
ADD VALORIPIORIGEM DOMAIN_VALOR2D;

ALTER TABLE NF
ADD TOTALUNITARIOIPIORIGEM DOMAIN_VALOR2D;

SET TERM ^ ;

CREATE OR ALTER trigger trigger_nf_somar for nf
active before update position 10
AS
DECLARE VARIABLE VAR_VALORMINIMO FLOAT;
DECLARE VARIABLE VAR_VALORADICIONAL FLOAT;
DECLARE VARIABLE VAR_VEZES INTEGER;
DECLARE VARIABLE VAR_PARCELA FLOAT;
DECLARE VARIABLE VAR_TOTAL FLOAT;
/*Calculo Volumes*/
DECLARE VARIABLE VAR_TIPOVOLUME VARCHAR(1);
DECLARE VARIABLE VAR_QTDE FLOAT;
DECLARE VARIABLE VAR_VOLUME FLOAT;
DECLARE VARIABLE VAR_ESPECIE VARCHAR(20);
DECLARE VARIABLE VAR_VOLUMEITEM INTEGER;
DECLARE VARIABLE VAR_PESOBRUTO FLOAT;
DECLARE VARIABLE VAR_PESOLIQUIDO FLOAT;
DECLARE VARIABLE VAR_SOMARPESO VARCHAR(1);
DECLARE VARIABLE VAR_VALORTOTALTRIBUTO NUMERIC(15,2);
DECLARE VARIABLE VARVALORSEGUROTIPOCFOP NUMERIC(15,2);
/*SERVICO*/
DECLARE VARIABLE VAR_VALORDESCONTOSERVICO FLOAT;
/*Valor seguro*/
DECLARE VARIABLE VARINDICE FLOAT;
DECLARE VARIABLE VARTOTAL NUMERIC(15,2);
DECLARE VARIABLE VARDIFERENCA NUMERIC(8,2);
DECLARE VARIABLE VARITEM INTEGER;
BEGIN
     IF (NEW.SOMAR = 'S') THEN BEGIN
        --iniciar valor seguro
        VARVALORSEGUROTIPOCFOP = 0;
        IF ((NEW.ORIGEM = 'P') AND (NEW.ATUALIZADA = 'N') AND (NEW.CANCELADA = 'N')) THEN BEGIN
            --Verificar se tipo anterior tinha seguro
            IF (NEW.TIPOCFOP <> OLD.TIPOCFOP) THEN BEGIN
                SELECT TIPOCFOP.VALORSEGURO FROM TIPOCFOP
                WHERE TIPOCFOP.CODIGO = OLD.TIPOCFOP
                INTO :VARVALORSEGUROTIPOCFOP;
                IF (:VARVALORSEGUROTIPOCFOP > 0) THEN BEGIN
                    SELECT TIPOCFOP.VALORSEGURO FROM TIPOCFOP
                    WHERE TIPOCFOP.CODIGO = NEW.TIPOCFOP
                    INTO :VARVALORSEGUROTIPOCFOP;
                    IF (:VARVALORSEGUROTIPOCFOP = 0) THEN
                        UPDATE ITEMNF
                        SET ITEMNF.VALORSEGURO = 0
                        WHERE ITEMNF.IDNF = NEW.ID;
                END
            END
            SELECT TIPOCFOP.VALORSEGURO FROM TIPOCFOP
            WHERE TIPOCFOP.CODIGO = NEW.TIPOCFOP
            INTO :VARVALORSEGUROTIPOCFOP;
            IF (:VARVALORSEGUROTIPOCFOP > 0) THEN BEGIN
                IF (NEW.VALORSEGURO <> :VARVALORSEGUROTIPOCFOP) THEN BEGIN
                    IF (NEW.TOTALPRODUTO > 0) THEN
                        VARINDICE = :VARVALORSEGUROTIPOCFOP / NEW.TOTALPRODUTO;
                    ELSE
                        VARINDICE = 0;
                    UPDATE ITEMNF
                    SET ITEMNF.VALORSEGURO = ITEMNF.TOTAL * :VARINDICE
                    WHERE ITEMNF.IDNF = NEW.ID;

                    SELECT SUM(ITEMNF.VALORSEGURO), MIN(ITEMNF.ID)
                    FROM ITEMNF
                    WHERE ITEMNF.IDNF = NEW.ID
                    INTO :VARTOTAL, :VARITEM;
                    IF (:VARTOTAL <> :VARVALORSEGUROTIPOCFOP) THEN BEGIN
                        VARDIFERENCA = :VARVALORSEGUROTIPOCFOP - :VARTOTAL;
                        UPDATE ITEMNF
                        SET ITEMNF.VALORSEGURO = ITEMNF.VALORSEGURO + :VARDIFERENCA
                        WHERE ITEMNF.IDNF = NEW.ID
                        AND ITEMNF.ID = :VARITEM;
                    END
                END
            END
        END
        --fim valor seguro
        /*Recalcular Itens*/
        UPDATE ITEMNF
        SET ITEMNF.RECALCULAR = 'S'
        WHERE ITEMNF.IDNF = NEW.ID;
        /*Configuracao*/
        SELECT FILIAL.TIPOVOLUME,
               FILIAL.SOMARPESO FROM FILIAL
        WHERE FILIAL.CODIGO = NEW.FILIAL
        INTO :VAR_TIPOVOLUME, :VAR_SOMARPESO;
        /*Calculo produto*/
        SELECT SUM(ITEMNF.TOTAL),
               SUM(ITEMNF.BASEICMS), SUM(ITEMNF.VALORICMS), SUM(ITEMNF.VALORISENTO),
               SUM(ITEMNF.BASESUBSTITUICAO), SUM(ITEMNF.VALORSUBSTITUICAO),
               SUM(ITEMNF.BASEIPI), SUM(ITEMNF.VALORIPI),
               SUM(ITEMNF.BASEPIS), SUM(ITEMNF.VALORPIS), SUM(ITEMNF.VALORISENTOPIS),
               SUM(ITEMNF.BASECOFINS), SUM(ITEMNF.VALORCOFINS), SUM(ITEMNF.VALORISENTOCOFINS),
               SUM(ITEMNF.BASEFUNRURAL), SUM(ITEMNF.VALORFUNRURAL), SUM(ITEMNF.VALORSENAR),
               SUM(ITEMNF.TOTALPESOBRUTO), SUM(ITEMNF.TOTALPESOLIQUIDO),
               SUM(ITEMNF.QTDE), SUM(ITEMNF.QTDE / PRODUTO.QTDECARREGAMENTO), SUM(ITEMNF.VOLUME),
               SUM(ITEMNF.VALORSIMPLES), SUM(ITEMNF.VALORPUBLICA), SUM(ITEMNF.VALORFUNDESA),
               SUM(ITEMNF.VALORST), SUM(ITEMNF.BASEST),
               SUM(ITEMNF.BASERESSARCIMENTOST), SUM(ITEMNF.VALORRESSARCIMENTOST),
               COALESCE(SUM(ITEMNF.VALORDESCONTO),0), SUM(ITEMNF.VALORBRUTO),
               COALESCE(SUM(ITEMNF.VALORII),0)
               , COALESCE(SUM(ITEMNF.VALORICMSDIFERIMENTO),0)
               , COALESCE(SUM(ITEMNF.VALORDESCONTOSIMPLES),0)
               , COALESCE(SUM(ITEMNF.VALORTOTALTRIBUTO),0)
               , COALESCE(SUM(ITEMNF.VALORICMSDESTINO),0)
               , COALESCE(SUM(ITEMNF.VALORDIFAL),0)
               , COALESCE(SUM(ITEMNF.VALORPARTILHAORIGEM),0)
               , COALESCE(SUM(ITEMNF.VALORPARTILHADESTINO),0)
               , COALESCE(SUM(ITEMNF.BASEFCEP),0)
               , COALESCE(SUM(ITEMNF.VALORFCEP),0)
               , COALESCE(SUM(ITEMNF.BASEICMSINTERESTADUAL),0)
               , COALESCE(SUM(ITEMNF.BASEICMSDESONERADO),0)
               , COALESCE(SUM(ITEMNF.VALORICMSDESONERADO),0)
               , COALESCE(SUM(ITEMNF.VALORFCPST),0)
               , COALESCE(SUM(ITEMNF.VALORIPIDEVOLVIDO),0)
               , COALESCE(SUM(ITEMNF.VALORFCPSTRET),0)
               , COALESCE(SUM(ITEMNF.VALORFCPUFDEST),0)
               , COALESCE(SUM(ITEMNF.VALORSEGURO),0)
               , COALESCE(SUM(ITEMNF.BASEFCPUFDEST),0)
               , COALESCE(SUM(ITEMNF.BASESUBSORIGEM),0)
               , COALESCE(SUM(ITEMNF.VALORSUBSORIGEM),0)
               , COALESCE(SUM(ITEMNF.UNITARIOSUBSORIGEM),0)
               , COALESCE(SUM(ITEMNF.BASEICMSORIGEM),0)
               , COALESCE(SUM(ITEMNF.VALORICMSORIGEM),0)
               , COALESCE(SUM(ITEMNF.UNITARIOICMSORIGEM),0)
               , COALESCE(SUM(ITEMNF.BASEIPIORIGEM),0)
               , COALESCE(SUM(ITEMNF.VALORIPIORIGEM),0)
               , COALESCE(SUM(ITEMNF.UNITARIOIPIORIGEM),0)
        FROM ITEMNF
        INNER JOIN PRODUTO ON PRODUTO.CODIGO = ITEMNF.PRODUTO
        WHERE ITEMNF.IDNF = NEW.ID
        INTO NEW.TOTALPRODUTO,
             NEW.BASEICMS, NEW.VALORICMS, NEW.VALORISENTO,
             NEW.BASESUBSTITUICAO, NEW.VALORSUBSTITUICAO,
             NEW.BASEIPI, NEW.VALORIPI,
             NEW.BASEPIS, NEW.VALORPIS, NEW.VALORISENTOPIS,
             NEW.BASECOFINS, NEW.VALORCOFINS, NEW.VALORISENTOCOFINS,
             NEW.BASEFUNRURAL, NEW.VALORFUNRURAL, NEW.VALORSENAR,
             :VAR_PESOBRUTO, :VAR_PESOLIQUIDO,
             :VAR_QTDE, :VAR_VOLUME, :VAR_VOLUMEITEM,
             NEW.VALORSIMPLES, NEW.VALORPUBLICA, NEW.VALORFUNDESA,
             NEW.VALORST, NEW.BASEST,
             NEW.BASERESSARCIMENTOST, NEW.VALORRESSARCIMENTOST,
             NEW.VALORDESCONTO, NEW.TOTALBRUTO, NEW.VALORII
             , NEW.VALORICMSDIFERIMENTO, NEW.VALORDESCONTOSIMPLES
             , NEW.VALORTOTALTRIBUTO
             , NEW.TOTALICMSDESTINO
             , NEW.TOTALDIFAL
             , NEW.TOTALPARTILHAORIGEM
             , NEW.TOTALPARTILHADESTINO
             , NEW.BASEFCEP
             , NEW.TOTALFCEP
             , NEW.TOTALBASEICMSINTERESTADUAL
             , NEW.BASEICMSDESONERADO
             , NEW.VALORICMSDESONERADO
             , NEW.TOTALFCPST
             , NEW.TOTALIPIDEVOLVIDO
             , NEW.TOTALFCPSTRET
             , NEW.TOTALFCPUFDEST
             , NEW.VALORSEGURO
             , NEW.BASEFCPUFDEST
             , NEW.BASESUBSORIGEM
             , NEW.VALORSUBSORIGEM
             , NEW.TOTALUNITARIOSUBSORIGEM
             , NEW.BASEICMSORIGEM
             , NEW.VALORICMSORIGEM
             , NEW.TOTALUNITARIOICMSORIGEM
             , NEW.BASEIPIORIGEM
             , NEW.VALORIPIORIGEM
             , NEW.TOTALUNITARIOIPIORIGEM
             ;
        IF (:VAR_SOMARPESO = 'S') THEN BEGIN
            NEW.PESOBRUTO = :VAR_PESOBRUTO;
            NEW.PESOLIQUIDO = :VAR_PESOLIQUIDO;
        END
        IF (:VAR_TIPOVOLUME = 'S') THEN BEGIN
            NEW.VOLUME = :VAR_QTDE;
        END ELSE
        IF (:VAR_TIPOVOLUME = 'C') THEN BEGIN
            NEW.VOLUME = :VAR_VOLUME;
        END ELSE
        IF (:VAR_TIPOVOLUME = 'D') THEN BEGIN
            FOR
                SELECT SUM(QUANTIDADE) AS QUANTIDADE, ESPECIE, SUM(PESOBRUTO), SUM(PESOLIQUIDO)
                FROM (
                    SELECT ITEMNF.PRODUTO,
                        CASE WHEN ((CAST(ITEMNF.QTDE / PRODUTO.QTDECARREGAMENTO AS INTEGER) * PRODUTO.QTDECARREGAMENTO) > ITEMNF.QTDE) THEN (CAST(ITEMNF.QTDE / PRODUTO.QTDECARREGAMENTO AS INTEGER) - 1) ELSE CAST(ITEMNF.QTDE / PRODUTO.QTDECARREGAMENTO AS INTEGER) END AS QUANTIDADE
                        , 'CAIXAS' AS ESPECIE
                        , (((CASE WHEN ((CAST(ITEMNF.QTDE / PRODUTO.QTDECARREGAMENTO AS INTEGER) * PRODUTO.QTDECARREGAMENTO) > ITEMNF.QTDE) THEN CAST(ITEMNF.QTDE / PRODUTO.QTDECARREGAMENTO AS INTEGER) - 1 ELSE CAST(ITEMNF.QTDE / PRODUTO.QTDECARREGAMENTO AS INTEGER) END) * PRODUTO.QTDECARREGAMENTO) * PRODUTO.PESOBRUTO) AS PESOBRUTO
                        , (((CASE WHEN ((CAST(ITEMNF.QTDE / PRODUTO.QTDECARREGAMENTO AS INTEGER) * PRODUTO.QTDECARREGAMENTO) > ITEMNF.QTDE) THEN CAST(ITEMNF.QTDE / PRODUTO.QTDECARREGAMENTO AS INTEGER) - 1 ELSE CAST(ITEMNF.QTDE / PRODUTO.QTDECARREGAMENTO AS INTEGER) END) * PRODUTO.QTDECARREGAMENTO) * PRODUTO.PESOLIQUIDO) AS PESOLIQUIDO
                    FROM ITEMNF
                    INNER JOIN PRODUTO ON PRODUTO.CODIGO = ITEMNF.PRODUTO
                    WHERE ITEMNF.IDNF = NEW.ID
                    UNION
                    SELECT ITEMNF.PRODUTO
                        , ITEMNF.QTDE - ((CASE WHEN ((CAST(ITEMNF.QTDE / PRODUTO.QTDECARREGAMENTO AS INTEGER) * PRODUTO.QTDECARREGAMENTO) > ITEMNF.QTDE) THEN CAST(ITEMNF.QTDE / PRODUTO.QTDECARREGAMENTO AS INTEGER) - 1 ELSE CAST(ITEMNF.QTDE / PRODUTO.QTDECARREGAMENTO AS INTEGER) END) * PRODUTO.QTDECARREGAMENTO)
                        , 'UNIDADES'
                        , ((ITEMNF.QTDE - ((CASE WHEN ((CAST(ITEMNF.QTDE / PRODUTO.QTDECARREGAMENTO AS INTEGER) * PRODUTO.QTDECARREGAMENTO) > ITEMNF.QTDE) THEN CAST(ITEMNF.QTDE / PRODUTO.QTDECARREGAMENTO AS INTEGER) - 1 ELSE CAST(ITEMNF.QTDE / PRODUTO.QTDECARREGAMENTO AS INTEGER) END) * PRODUTO.QTDECARREGAMENTO)) * PRODUTO.PESOBRUTO)
                        , ((ITEMNF.QTDE - ((CASE WHEN ((CAST(ITEMNF.QTDE / PRODUTO.QTDECARREGAMENTO AS INTEGER) * PRODUTO.QTDECARREGAMENTO) > ITEMNF.QTDE) THEN CAST(ITEMNF.QTDE / PRODUTO.QTDECARREGAMENTO AS INTEGER) - 1 ELSE CAST(ITEMNF.QTDE / PRODUTO.QTDECARREGAMENTO AS INTEGER) END) * PRODUTO.QTDECARREGAMENTO)) * PRODUTO.PESOLIQUIDO)
                    FROM ITEMNF
                    INNER JOIN PRODUTO ON PRODUTO.CODIGO = ITEMNF.PRODUTO
                    WHERE ITEMNF.IDNF = NEW.ID
                ) GROUP BY 2
                INTO :VAR_VOLUME, :VAR_ESPECIE, :VAR_PESOBRUTO, :VAR_PESOLIQUIDO
            DO BEGIN
                UPDATE OR INSERT
                INTO NFVOLUME(NFVOLUME.NUMERO, NFVOLUME.SERIE, NFVOLUME.FILIAL, NFVOLUME.ORIGEM, NFVOLUME.CLIFOR,
                NFVOLUME.QUANTIDADE, NFVOLUME.ESPECIE, NFVOLUME.PESOBRUTO, NFVOLUME.PESOLIQUIDO)
                VALUES (NEW.NUMERO, NEW.SERIE, NEW.FILIAL, NEW.ORIGEM, NEW.CLIFOR, :VAR_VOLUME, :VAR_ESPECIE, :VAR_PESOBRUTO, :VAR_PESOLIQUIDO)
                MATCHING (NFVOLUME.NUMERO, NFVOLUME.SERIE, NFVOLUME.FILIAL, NFVOLUME.ORIGEM, NFVOLUME.CLIFOR, NFVOLUME.ESPECIE);
            END
            --REMOVER VOLUME ZERADO
            DELETE FROM NFVOLUME
            WHERE NFVOLUME.IDNF = NEW.ID
            AND NFVOLUME.QUANTIDADE = 0;
            --SELECT VOLUME CALCULADO
            SELECT SUM(NFVOLUME.QUANTIDADE), SUM(NFVOLUME.PESOBRUTO), SUM(NFVOLUME.PESOLIQUIDO)
            FROM NFVOLUME
            WHERE NFVOLUME.IDNF = NEW.ID
            INTO NEW.VOLUME, NEW.PESOBRUTO, NEW.PESOLIQUIDO;
        END ELSE
        IF (:VAR_TIPOVOLUME = 'V') THEN BEGIN
            NEW.VOLUME = :VAR_VOLUMEITEM;
        END
        /*Calculo Servico*/
        SELECT SUM(SERVICONF.BASEISS), SUM(SERVICONF.VALORISS)
        , SUM(SERVICONF.VALORPIS), SUM(SERVICONF.VALORCOFINS)
        , SUM(SERVICONF.VALORIRRF), SUM(SERVICONF.VALORTOTALTRIBUTO)
        , SUM(SERVICONF.VALORDESCONTO), SUM(SERVICONF.VALORBRUTO)
        FROM SERVICONF
        WHERE SERVICONF.IDNF = NEW.ID
        INTO NEW.BASEISS, NEW.VALORISS, NEW.VALORPISSERVICO, NEW.VALORCOFINSSERVICO
        , NEW.VALORIRRF, :VAR_VALORTOTALTRIBUTO, :VAR_VALORDESCONTOSERVICO, NEW.TOTALSERVICO;

        IF (:VAR_VALORDESCONTOSERVICO IS NULL) THEN VAR_VALORDESCONTOSERVICO = 0;
        NEW.VALORDESCONTO = NEW.VALORDESCONTO + :VAR_VALORDESCONTOSERVICO;

        IF (:VAR_VALORTOTALTRIBUTO IS NULL) THEN
            VAR_VALORTOTALTRIBUTO = 0;
        IF (NEW.VALORTOTALTRIBUTO IS NULL) THEN NEW.VALORTOTALTRIBUTO = 0;
        NEW.VALORTOTALTRIBUTO = NEW.VALORTOTALTRIBUTO + VAR_VALORTOTALTRIBUTO;
        /*Corrige valores se estiver nullo*/
        IF (NEW.VOLUME IS NULL) THEN NEW.VOLUME = 0;
        IF (NEW.BASEICMS IS NULL) THEN NEW.BASEICMS = 0;
        IF (NEW.VALORICMS IS NULL) THEN NEW.VALORICMS = 0;
        IF (NEW.VALORICMSDIFERIMENTO IS NULL) THEN NEW.VALORICMSDIFERIMENTO = 0;
        IF (NEW.VALORISENTO IS NULL) THEN NEW.VALORISENTO = 0;
        IF (NEW.BASESUBSTITUICAO IS NULL) THEN NEW.BASESUBSTITUICAO = 0;
        IF (NEW.VALORSUBSTITUICAO IS NULL) THEN NEW.VALORSUBSTITUICAO = 0;
        IF (NEW.BASEIPI IS NULL) THEN NEW.BASEIPI = 0;
        IF (NEW.VALORIPI IS NULL) THEN NEW.VALORIPI = 0;
        IF (NEW.BASEISS IS NULL) THEN NEW.BASEISS = 0;
        IF (NEW.VALORISS IS NULL) THEN NEW.VALORISS = 0;
        IF (NEW.BASECOFINS IS NULL) THEN NEW.BASECOFINS = 0;
        IF (NEW.VALORCOFINS IS NULL) THEN NEW.VALORCOFINS = 0;
        IF (NEW.VALORISENTOCOFINS IS NULL) THEN NEW.VALORISENTOCOFINS = 0;
        IF (NEW.BASEFUNRURAL IS NULL) THEN NEW.BASEFUNRURAL = 0;
        IF (NEW.VALORFUNRURAL IS NULL) THEN NEW.VALORFUNRURAL = 0;
        IF (NEW.VALORSENAR IS NULL) THEN NEW.VALORSENAR = 0;
        IF (NEW.BASEPIS IS NULL) THEN NEW.BASEPIS = 0;
        IF (NEW.VALORPIS IS NULL) THEN NEW.VALORPIS = 0;
        IF (NEW.VALORISENTOPIS IS NULL) THEN NEW.VALORISENTOPIS = 0;
        IF (NEW.PESOBRUTO IS NULL) THEN NEW.PESOBRUTO = 0;
        IF (NEW.PESOLIQUIDO IS NULL) THEN NEW.PESOLIQUIDO = 0;
        IF (NEW.TOTALPRODUTO IS NULL) THEN NEW.TOTALPRODUTO = 0;
        IF (NEW.VALORSIMPLES IS NULL) THEN NEW.VALORSIMPLES = 0;
        IF (NEW.VALORFUNDESA IS NULL) THEN NEW.VALORFUNDESA = 0;
        IF (NEW.VALORST IS NULL) THEN NEW.VALORST = 0;
        IF (NEW.BASEST IS NULL) THEN NEW.BASEST = 0;
        IF (NEW.BASERESSARCIMENTOST IS NULL) THEN NEW.BASERESSARCIMENTOST = 0;
        IF (NEW.VALORRESSARCIMENTOST IS NULL) THEN NEW.VALORRESSARCIMENTOST = 0;
        IF (NEW.VALORPISSERVICO IS NULL) THEN NEW.VALORPISSERVICO = 0;
        IF (NEW.VALORCOFINSSERVICO IS NULL) THEN NEW.VALORCOFINSSERVICO = 0;
        IF (NEW.VALORPUBLICA IS NULL) THEN NEW.VALORPUBLICA = 0;
        IF (NEW.TOTALBRUTO IS NULL) THEN NEW.TOTALBRUTO = 0;
        IF (NEW.VALORII IS NULL) THEN NEW.VALORII = 0;
        IF (NEW.VALORIRRF IS NULL) THEN NEW.VALORIRRF = 0;
        IF (NEW.VALORDESCONTOSIMPLES IS NULL) THEN NEW.VALORDESCONTOSIMPLES = 0;
        IF (NEW.TOTALSERVICO IS NULL) THEN NEW.TOTALSERVICO = 0;
        IF (NEW.BASEICMSDESONERADO IS NULL) THEN NEW.BASEICMSDESONERADO = 0;
        IF (NEW.VALORICMSDESONERADO IS NULL) THEN NEW.VALORICMSDESONERADO = 0;
        IF (NEW.TOTALFCPST IS NULL) THEN NEW.TOTALFCPST = 0;
        IF (NEW.TOTALIPIDEVOLVIDO IS NULL) THEN NEW.TOTALIPIDEVOLVIDO = 0;
        IF (NEW.TOTALFCPSTRET IS NULL) THEN NEW.TOTALFCPSTRET = 0;
        IF (NEW.TOTALFCPUFDEST IS NULL) THEN NEW.TOTALFCPUFDEST = 0;
        IF (NEW.BASEFCPUFDEST IS NULL) THEN NEW.BASEFCPUFDEST = 0;
        IF (NEW.VALORSEGURO IS NULL) THEN NEW.VALORSEGURO = 0;
        IF (NEW.VALORCOTACAPITAL IS NULL) THEN NEW.VALORCOTACAPITAL = 0;
        IF (NEW.VALORADIANTAMENTO IS NULL) THEN NEW.VALORADIANTAMENTO = 0;
        /*Valor adicional - Geralmente cobranca de custo do boleto*/
        SELECT FORMAPAGAMENTO.VALORMINIMO, FORMAPAGAMENTO.VALORADICIONAL
        FROM FORMAPAGAMENTO
        WHERE FORMAPAGAMENTO.CODIGO = NEW.FORMAPAGAMENTO
        INTO :VAR_VALORMINIMO, :VAR_VALORADICIONAL;
        IF ((:VAR_VALORMINIMO > 0) AND (:VAR_VALORADICIONAL > 0)) THEN BEGIN
            NEW.VALORENCARGO = 0;
            VAR_TOTAL = (NEW.TOTALPRODUTO + NEW.BASEISS + NEW.VALORFRETE + NEW.VALORSEGURO + NEW.VALORSUBSTITUICAO + NEW.VALORIPI) - (NEW.VALORDESCONTO+NEW.VALORDESCONTOSIMPLES+NEW.VALORFUNRURAL+NEW.VALORSENAR+NEW.VALORCOTACAPITAL);
            SELECT CONDICAOPAGAMENTO.VEZES FROM CONDICAOPAGAMENTO
            WHERE CONDICAOPAGAMENTO.CODIGO = NEW.CONDICAOPAGAMENTO
            INTO :VAR_VEZES;
            IF (:VAR_VEZES > 0) THEN BEGIN
                VAR_PARCELA = :VAR_TOTAL / VAR_VEZES;
            END ELSE BEGIN
                VAR_PARCELA = :VAR_TOTAL;
            END
            IF (:VAR_PARCELA < :VAR_VALORMINIMO) THEN BEGIN
                NEW.VALORENCARGO = :VAR_VALORADICIONAL * :VAR_VEZES;
            END
        END
        /*Calcula total Geral*/
        NEW.TOTAL = (NEW.TOTALPRODUTO + NEW.BASEISS +
                     NEW.VALORFRETE + NEW.VALORSEGURO + NEW.VALORENCARGO +
                     NEW.TOTALFCEP + NEW.TOTALFCPST +
                     NEW.VALORSUBSTITUICAO + NEW.VALORIPI) - (NEW.VALORPUBLICA + NEW.VALORICMSDESONERADO);
        NEW.SOMAR = 'N';
     END /*IF (NEW.SOMAR = 'S' THEN BEGIN*/
END^

SET TERM ; ^

CREATE OR ALTER VIEW VIEW_ITEMNF(
    NUMERO,
    SERIE,
    FILIAL,
    ORIGEM,
    CLIFOR,
    ITEM,
    PRODUTO,
    BARRAS,
    NOMEPRODUTO,
    DESCRICAOEMBALAGEM,
    CODIGOFORNECEDOR,
    REFERENCIA,
    UNIDADEMEDIDA,
    UNVENDA,
    QTDEVENDA,
    QTDECOMPRA,
    CST,
    QTDE,
    UNITARIO,
    VALORVOLUME,
    VALORLIQUIDO,
    PERCDESCONTO,
    VALORDESCONTO,
    TOTAL,
    BASEICMS,
    BASECALCICMS,
    BASECALCICMSF,
    VALORICMS,
    PERCICMS,
    BASESUBSTITUICAO,
    BASECALCSUBSTITUICAO,
    VALORSUBSTITUICAO,
    VALORSUBSTITUICAOUNITARIO,
    PERCSUBSTITUICAO,
    REDSUBS,
    CSTIPI,
    BASEIPI,
    PERCIPI,
    VALORIPI,
    VALORISENTOIPI,
    BASEFUNRURAL,
    BASECALCFUNRURAL,
    PERCFUNRURAL,
    VALORFUNRURAL,
    PERCSENAR,
    VALORSENAR,
    PESOBRUTO,
    PESOLIQUIDO,
    OBSERVACAO1,
    OBSERVACAO2,
    OBSERVACAOPF1,
    OBSERVACAOPF2,
    VALORCUSTO,
    TOTALVALORCUSTO,
    ORDEM,
    QTDEDEVOLVIDO,
    CFOP,
    PRECOMAXIMOCONSUMIDOR,
    TOTALPRECOMAXIMOCONSUMIDOR,
    CODIGONCM,
    CEST,
    MARCA,
    NOMEMARCA,
    CSTPIS,
    BASEPIS,
    PERCPIS,
    VALORPIS,
    VALORISENTOPIS,
    CSTCOFINS,
    BASECOFINS,
    PERCCOFINS,
    VALORCOFINS,
    VALORISENTOCOFINS,
    QTDEVOLUMES,
    VALORBRUTO,
    LOCALIZACAO,
    BASEST,
    VALORST,
    VALORDESCONTOSIMPLES,
    VALORVENDA,
    QTDEMULTIPLAENTRADA,
    ORDEMPRODUTO,
    TIPOPRODUTO,
    NOMETIPOPRODUTO,
    ITEMORDEMCOMPRA,
    VALORCUSTOTABELAANTERIOR,
    CONTROLARLOTEVALIDADE,
    ENQUADRAMENTOLEGALIPI,
    VALORICMSDESTINO,
    VALORDIFAL,
    VALORPARTILHAORIGEM,
    VALORPARTILHADESTINO,
    PERCFCEP,
    VALORFCEP,
    PERCICMSINTERNA,
    PERCDESTINO,
    BASEICMSINTERESTADUAL,
    PERCICMSINTERESTADUAL,
    VALORFCPUFDEST,
    BASEFCPUFDEST,
    VALORFCPST,
    BASEFCPST,
    VALORICMSEFET,
    PERCSUBS)
AS
SELECT ITEMNF.NUMERO, ITEMNF.SERIE, ITEMNF.FILIAL, ITEMNF.ORIGEM, ITEMNF.CLIFOR,
ITEMNF.ITEM, ITEMNF.PRODUTO, PRODUTO.BARRAS, PRODUTO.NOME, PRODUTO.DESCRICAOEMBALAGEM
, PRODUTO.CODIGOFORNECEDOR, PRODUTO.REFERENCIA, ITEMNF.UNIDADEMEDIDA
, PRODUTO.UNVENDA, PRODUTO.QTDEVENDA, PRODUTO.QTDECOMPRA, ITEMNF.CST,
ITEMNF.QTDE, ITEMNF.UNITARIO, ITEMNF.UNITARIO * PRODUTO.QTDEVENDA,
CASE WHEN (ITEMNF.QTDE = 0) THEN
    ITEMNF.TOTAL
ELSE
    ITEMNF.TOTAL / ITEMNF.QTDE
END,
ITEMNF.PERCDESCONTO, ITEMNF.VALORDESCONTO, ITEMNF.TOTAL,
ITEMNF.BASEICMS, IMPOSTO.BASEICMS, IMPOSTO.BASEICMSF, ITEMNF.VALORICMS, ITEMNF.PERCICMS,
ITEMNF.BASESUBSTITUICAO, IMPOSTO.BASESUBS, ITEMNF.VALORSUBSTITUICAO,
CASE WHEN (ITEMNF.QTDE = 0) THEN
    ITEMNF.VALORSUBSTITUICAO
ELSE
    ITEMNF.VALORSUBSTITUICAO / ITEMNF.QTDE
END,
IMPOSTO.PERCSUBS, IMPOSTO.REDSUBS,
ITEMNF.CSTIPI, ITEMNF.BASEIPI, ITEMNF.PERCIPI, ITEMNF.VALORIPI, ITEMNF.VALORISENTOIPI,
ITEMNF.BASEFUNRURAL, IMPOSTO.BASEFUNRURAL, IMPOSTO.PERCFUNRURAL, ITEMNF.VALORFUNRURAL,
IMPOSTO.PERCSENAR, ITEMNF.VALORSENAR,
ITEMNF.QTDE * PRODUTO.PESOBRUTO, ITEMNF.QTDE * PRODUTO.PESOLIQUIDO,
IMPOSTO.OBSERVACAO1, IMPOSTO.OBSERVACAO2,
IMPOSTO.OBSERVACAOPF1, IMPOSTO.OBSERVACAOPF2, ITEMNF.VALORCUSTO, ITEMNF.TOTALVALORCUSTO,
GRUPO.ORDEM, ITEMNF.QTDEDEVOLVIDO, CFOP.CFOP, ITEMNF.PRECOMAXIMOCONSUMIDOR,
ITEMNF.TOTALPRECOMAXIMOCONSUMIDOR,
CASE WHEN (ITEMNF.CODIGONCM IS NOT NULL) THEN
    ITEMNF.CODIGONCM
ELSE
    (SELECT P.CODIGONCM FROM PRODUTO P WHERE P.CODIGO = ITEMNF.PRODUTO)
END,
ITEMNF.CEST,
PRODUTO.MARCA, MARCA.NOME,
ITEMNF.CSTPIS, ITEMNF.BASEPIS, ITEMNF.PERCPIS, ITEMNF.VALORPIS, ITEMNF.VALORISENTOPIS,
ITEMNF.CSTCOFINS, ITEMNF.BASECOFINS, ITEMNF.PERCCOFINS, ITEMNF.VALORCOFINS, ITEMNF.VALORISENTOCOFINS,
ITEMNF.QTDEVOLUME, ITEMNF.VALORBRUTO, ESTOQUE.LOCALIZACAO
, ITEMNF.BASEST, ITEMNF.VALORST
, ITEMNF.VALORDESCONTOSIMPLES
, ITEMNF.VALORVENDA
, ITEMNF.QTDEMULTIPLAENTRADA
, PRODUTO.ORDEM
, PRODUTO.TIPOPRODUTO, TIPOPRODUTO.NOME
, ITEMNF.ITEMORDEMCOMPRA
, ITEMNF.VALORCUSTOTABELAANTERIOR
, ESTOQUE.CONTROLARLOTEVALIDADE
, ITEMNF.ENQUADRAMENTOLEGALIPI
, ITEMNF.VALORICMSDESTINO
, ITEMNF.VALORDIFAL
, ITEMNF.VALORPARTILHAORIGEM
, ITEMNF.VALORPARTILHADESTINO
, ITEMNF.PERCFCEP
, ITEMNF.VALORFCEP
, ITEMNF.PERCICMSINTERNA
, ITEMNF.PERCDESTINO
, ITEMNF.BASEICMSINTERESTADUAL
, ITEMNF.PERCICMSINTERESTADUAL
, ITEMNF.VALORFCPUFDEST
, ITEMNF.BASEFCPUFDEST
, ITEMNF.VALORFCPST
, ITEMNF.BASEFCPST
, ITEMNF.VALORICMSEFET
, ITEMNF.PERCSUBSTITUICAO
FROM ITEMNF

INNER JOIN PRODUTO ON PRODUTO.CODIGO = ITEMNF.PRODUTO
INNER JOIN ESTOQUE ON ESTOQUE.FILIAL = ITEMNF.FILIAL AND ESTOQUE.PRODUTO = ITEMNF.PRODUTO
INNER JOIN GRUPO ON GRUPO.CODIGO = PRODUTO.GRUPO
INNER JOIN CFOP ON CFOP.CODIGO = ITEMNF.CFOP
INNER JOIN CLIFOR ON CLIFOR.CODIGO = ITEMNF.CLIFOR
INNER JOIN CIDADE ON CIDADE.CODIGO = CLIFOR.CIDADE
INNER JOIN TIPOCFOP ON TIPOCFOP.CODIGO = CFOP.TIPOCFOP
LEFT JOIN IMPOSTO ON IMPOSTO.TRIBUTACAO = PRODUTO.TRIBUTACAO AND IMPOSTO.FILIAL = ITEMNF.FILIAL AND IMPOSTO.ESTADO = CIDADE.ESTADO AND IMPOSTO.NATUREZAOPERACAO = TIPOCFOP.NATUREZAOPERACAO
LEFT JOIN MARCA ON MARCA.CODIGO = PRODUTO.MARCA
LEFT JOIN TIPOPRODUTO ON TIPOPRODUTO.CODIGO = PRODUTO.TIPOPRODUTO
;

