CREATE TABLE PESQUISA (
    ID DOM_ID GENERATED BY DEFAULT AS IDENTITY,
    DISTRIBUIDOR DOM_ID,
    NOME DOM_STR_60_NN,
    DATAINICIAL DOM_DAT_NN,
    DATAFINAL DOM_DAT_NN,
    OBRIGATORIA DOM_STR_01_NN,
    FINALIZADA DOM_STR_01_NN,
    CANCELADA DOM_STR_01_NN,
    ADIAMENTOMAXIMO DOM_INT_NN,
    EXIGIRIMAGEM DOM_STR_01_NN,
	REPLICAR DOM_STR_01);

ALTER TABLE PESQUISA
ADD CONSTRAINT PK_NEW_TABLE
PRIMARY KEY (ID);

ALTER TABLE PESQUISA
ADD CONSTRAINT FK_PESQUISA_DISTRIBUIDOR
FOREIGN KEY (DISTRIBUIDOR)
REFERENCES DISTRIBUIDOR(ID);

SET TERM ^ ;

CREATE trigger tri_pesquisa_biu for pesquisa
active before insert or update position 0
AS
BEGIN
    NEW.REPLICAR = 'S';
END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER trigger tri_pesquisa_replicar for pesquisa
active before insert or update position 99
AS
BEGIN
    NEW.REPLICAR = 'N';
END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER trigger tri_pesquisa_replicarerp for pesquisa
active before insert or update position 10
AS
DECLARE VARIABLE TERMINAL DOM_ID;
DECLARE VARIABLE DISTRIBUIDOR DOM_STR_18_NN;
DECLARE VARIABLE SCRIPT DOM_STR_4K_NN;
BEGIN
    FOR
        SELECT TERMINAL.ID, CASE WHEN PESSOA.TIPO = 'J' THEN PESSOAJURIDICA.CNPJ ELSE PESSOAFISICA.CPF END AS DISTRIBUIDOR
        FROM TERMINAL
        INNER JOIN DISTRIBUIDOR ON DISTRIBUIDOR.ID = TERMINAL.DISTRIBUIDOR AND DISTRIBUIDOR.ID = NEW.DISTRIBUIDOR
        INNER JOIN PESSOA ON PESSOA.ID = DISTRIBUIDOR.PESSOA
        LEFT JOIN PESSOAJURIDICA ON PESSOA.TIPO = 'J' AND PESSOAJURIDICA.PESSOA = PESSOA.ID
        LEFT JOIN PESSOAFISICA ON PESSOA.TIPO = 'F' AND PESSOAFISICA.PESSOA = PESSOA.ID
        WHERE ((NEW.REPLICAR = 'S') AND (TERMINAL.ATIVO = 'S'))
        INTO :TERMINAL, :DISTRIBUIDOR
    DO BEGIN
        SCRIPT = 'EXECUTE PROCEDURE '
                || 'SET_PESQUISA'
                || '('
                || '''' ||:DISTRIBUIDOR || ''''
                || ', ' || NEW.ID
                || ', ' || '''' || REPLACE(NEW.NOME,'''',' ') || ''''
                || ', ' || '''' || NEW.DATAINICIAL || ''''
                || ', ' || '''' || NEW.DATAFINAL || ''''
                || ', ' || '''' || NEW.OBRIGATORIA || ''''
                || ', ' || '''' || NEW.FINALIZADA || ''''
                || ', ' || '''' || NEW.CANCELADA || ''''
                || ', ' || NEW.ADIAMENTOMAXIMO
                || ', ' || '''' || NEW.EXIGIRIMAGEM || ''''
                || ')';
        INSERT INTO SCRIPTSQL(SCRIPTSQL.TERMINAL, SCRIPTSQL.SCRIPT) VALUES (:TERMINAL, :SCRIPT);
    END
END^

SET TERM ; ^

CREATE TABLE PESQUISACLIENTE (
    ID DOM_ID GENERATED BY DEFAULT AS IDENTITY,
    PESQUISA DOM_ID,
    CLIENTE DOM_ID,
    VENDEDOR DOM_ID,
    ADIAMENTO DOM_INT_NN,
    DATAREALIZADO DOM_DAT,
	REPLICAR DOM_STR_01);

ALTER TABLE PESQUISACLIENTE
ADD CONSTRAINT PK_PESQUISACLIENTE
PRIMARY KEY (ID);

ALTER TABLE PESQUISACLIENTE
ADD CONSTRAINT FK_PESQUISACLIENTE_PESQUISA
FOREIGN KEY (PESQUISA)
REFERENCES PESQUISA(ID);

ALTER TABLE PESQUISACLIENTE
ADD CONSTRAINT FK_PESQUISACLIENTE_CLIENTE
FOREIGN KEY (CLIENTE)
REFERENCES CLIENTE(ID);

ALTER TABLE PESQUISACLIENTE
ADD CONSTRAINT FK_PESQUISACLIENTE_VENDEDOR
FOREIGN KEY (VENDEDOR)
REFERENCES VENDEDOR(ID);

ALTER TABLE PESQUISACLIENTE
ADD CONSTRAINT UNQ_PESQUISACLIENTE
UNIQUE (PESQUISA,CLIENTE);

SET TERM ^ ;

CREATE trigger tri_pesquisacliente_biu for pesquisacliente
active before insert or update position 0
AS
BEGIN
    NEW.REPLICAR = 'S';
END^

SET TERM ; ^

SET TERM ^ ;

CREATE trigger tri_pesquisacliente_replicar for pesquisacliente
active before insert or update position 99
AS
BEGIN
    NEW.REPLICAR = 'N';
END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER trigger tri_pesquisacliente_replicarerp for pesquisacliente
active before insert or update position 10
AS
DECLARE VARIABLE TERMINAL DOM_ID;
DECLARE VARIABLE DISTRIBUIDOR DOM_STR_18_NN;
DECLARE VARIABLE CLIENTE DOM_STR_18_NN;
DECLARE VARIABLE VENDEDOR DOM_STR_18_NN;
DECLARE VARIABLE SCRIPT DOM_STR_4K_NN;
BEGIN
    FOR
        SELECT TERMINAL.ID,
        CASE WHEN PESSOADISTRIBUIDOR.TIPO = 'J' THEN PESSOAJURIDICADISTRIBUIDOR.CNPJ ELSE PESSOAFISICADISTRIBUIDOR.CPF END AS DISTRIBUIDOR,
        CASE WHEN PESSOACLIENTE.TIPO = 'J' THEN PESSOAJURIDICACLIENTE.CNPJ ELSE PESSOAFISICACLIENTE.CPF END AS CLIENTE,
        CASE WHEN PESSOAVENDEDOR.TIPO = 'J' THEN PESSOAJURIDICAVENDEDOR.CNPJ ELSE PESSOAFISICAVENDEDOR.CPF END AS VENDEDOR
        FROM TERMINAL
        INNER JOIN DISTRIBUIDOR ON DISTRIBUIDOR.ID = TERMINAL.DISTRIBUIDOR
        INNER JOIN PESSOA PESSOADISTRIBUIDOR ON PESSOADISTRIBUIDOR.ID = DISTRIBUIDOR.PESSOA
        LEFT JOIN PESSOAJURIDICA PESSOAJURIDICADISTRIBUIDOR ON PESSOADISTRIBUIDOR.TIPO = 'J' AND PESSOAJURIDICADISTRIBUIDOR.PESSOA = PESSOADISTRIBUIDOR.ID
        LEFT JOIN PESSOAFISICA PESSOAFISICADISTRIBUIDOR ON PESSOADISTRIBUIDOR.TIPO = 'F' AND PESSOAFISICADISTRIBUIDOR.PESSOA = PESSOADISTRIBUIDOR.ID
        INNER JOIN CLIENTE ON CLIENTE.ID = NEW.CLIENTE
        INNER JOIN PESSOA PESSOACLIENTE ON PESSOACLIENTE.ID = CLIENTE.PESSOA
        LEFT JOIN PESSOAJURIDICA PESSOAJURIDICACLIENTE ON PESSOACLIENTE.TIPO = 'J' AND PESSOAJURIDICACLIENTE.PESSOA = PESSOACLIENTE.ID
        LEFT JOIN PESSOAFISICA PESSOAFISICACLIENTE ON PESSOACLIENTE.TIPO = 'F' AND PESSOAFISICACLIENTE.PESSOA = PESSOACLIENTE.ID
        INNER JOIN VENDEDOR ON VENDEDOR.ID = NEW.VENDEDOR
        INNER JOIN PESSOA PESSOAVENDEDOR ON PESSOAVENDEDOR.ID = VENDEDOR.PESSOA
        LEFT JOIN PESSOAJURIDICA PESSOAJURIDICAVENDEDOR ON PESSOAVENDEDOR.TIPO = 'J' AND PESSOAJURIDICAVENDEDOR.PESSOA = PESSOAVENDEDOR.ID
        LEFT JOIN PESSOAFISICA PESSOAFISICAVENDEDOR ON PESSOAVENDEDOR.TIPO = 'F' AND PESSOAFISICAVENDEDOR.PESSOA = PESSOAVENDEDOR.ID
        INNER JOIN PESQUISA ON PESQUISA.ID = NEW.PESQUISA
        WHERE ((NEW.REPLICAR = 'S') AND (TERMINAL.ATIVO = 'S') AND (TERMINAL.DISTRIBUIDOR = PESQUISA.DISTRIBUIDOR))
        INTO :TERMINAL, :DISTRIBUIDOR, :CLIENTE, :VENDEDOR
    DO BEGIN
        SCRIPT = 'EXECUTE PROCEDURE '
                || 'SET_PESQUISACLIFOR'
                || '('
                || '''' ||:DISTRIBUIDOR || ''''
                || ', ' || NEW.ID
                || ', ' || NEW.PESQUISA
                || ', ' || '''' || :CLIENTE || ''''
                || ', ' || '''' || :VENDEDOR || ''''
                || ', ' || NEW.ADIAMENTO
                || ', ' || CASE WHEN NEW.DATAREALIZADO IS NULL THEN 'NULL' ELSE '''' || NEW.DATAREALIZADO || '''' END
                || ')';
        INSERT INTO SCRIPTSQL(SCRIPTSQL.TERMINAL, SCRIPTSQL.SCRIPT) VALUES (:TERMINAL, :SCRIPT);
    END
END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER trigger tri_pesquisacliente_deletarerp for pesquisacliente
active after delete position 0
AS
DECLARE VARIABLE TERMINAL DOM_ID;
DECLARE VARIABLE DISTRIBUIDOR DOM_STR_18_NN;
DECLARE VARIABLE SCRIPT DOM_STR_4K_NN;
BEGIN
    FOR
        SELECT TERMINAL.ID,
        CASE WHEN PESSOA.TIPO = 'J' THEN PESSOAJURIDICA.CNPJ ELSE PESSOAFISICA.CPF END AS DISTRIBUIDOR
        FROM TERMINAL
        INNER JOIN DISTRIBUIDOR ON DISTRIBUIDOR.ID = TERMINAL.DISTRIBUIDOR
        INNER JOIN PESSOA  ON PESSOA.ID = DISTRIBUIDOR.PESSOA
        LEFT JOIN PESSOAJURIDICA ON PESSOA.TIPO = 'J' AND PESSOAJURIDICA.PESSOA = PESSOA.ID
        LEFT JOIN PESSOAFISICA ON PESSOA.TIPO = 'F' AND PESSOAFISICA.PESSOA = PESSOA.ID
        INNER JOIN PESQUISA ON PESQUISA.ID = OLD.PESQUISA
        WHERE ((TERMINAL.ATIVO = 'S') AND (TERMINAL.DISTRIBUIDOR = PESQUISA.DISTRIBUIDOR))
        INTO :TERMINAL, :DISTRIBUIDOR
    DO BEGIN
        SCRIPT = 'EXECUTE PROCEDURE '
                || 'DEL_PESQUISACLIFOR'
                || '('
                || '''' ||:DISTRIBUIDOR || ''''
                || ', ' || OLD.ID
                || ', ' || OLD.PESQUISA
                || ')';
        INSERT INTO SCRIPTSQL(SCRIPTSQL.TERMINAL, SCRIPTSQL.SCRIPT) VALUES (:TERMINAL, :SCRIPT);
    END
END^

SET TERM ; ^


CREATE TABLE PESQUISAPRODUTO (
    ID DOM_ID GENERATED BY DEFAULT AS IDENTITY,
    PESQUISA DOM_ID,
    PRODUTO DOM_ID,
    REGISTRARCONCORRENTE DOM_STR_01_NN,
    REPLICAR DOM_STR_01);

ALTER TABLE PESQUISAPRODUTO
ADD CONSTRAINT PK_PESQUISAPRODUTO
PRIMARY KEY (ID);

ALTER TABLE PESQUISAPRODUTO
ADD CONSTRAINT FK_PESQUISAPRODUTO_PESQUISA
FOREIGN KEY (PESQUISA)
REFERENCES PESQUISA(ID);

ALTER TABLE PESQUISAPRODUTO
ADD CONSTRAINT FK_PESQUISAPRODUTO_PRODUTO
FOREIGN KEY (PRODUTO)
REFERENCES PRODUTO(ID);

ALTER TABLE PESQUISAPRODUTO
ADD CONSTRAINT UNQ_PESQUISAPRODUTO
UNIQUE (PESQUISA,PRODUTO);

SET TERM ^ ;

CREATE trigger tri_pesquisaproduto_biu for pesquisaproduto
active before insert or update position 0
AS
BEGIN
    NEW.REPLICAR = 'S';
END^

SET TERM ; ^

SET TERM ^ ;

CREATE trigger tri_pesquisaproduto_replicar for pesquisaproduto
active before insert or update position 99
AS
BEGIN
    NEW.REPLICAR = 'S';
END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER trigger tri_pesquisaproduto_replicarerp for pesquisaproduto
active before insert or update position 10
AS
DECLARE VARIABLE TERMINAL DOM_ID;
DECLARE VARIABLE DISTRIBUIDOR DOM_STR_18_NN;
DECLARE VARIABLE PRODUTO DOM_STR_14_NN;
DECLARE VARIABLE SCRIPT DOM_STR_4K_NN;
BEGIN
    FOR
        SELECT TERMINAL.ID, PRODUTO.BARRAS, CASE WHEN PESSOA.TIPO = 'J' THEN PESSOAJURIDICA.CNPJ ELSE PESSOAFISICA.CPF END AS DISTRIBUIDOR
        FROM TERMINAL
        INNER JOIN DISTRIBUIDOR ON DISTRIBUIDOR.ID = TERMINAL.DISTRIBUIDOR
        INNER JOIN PESSOA ON PESSOA.ID = DISTRIBUIDOR.PESSOA
        LEFT JOIN PESSOAJURIDICA ON PESSOA.TIPO = 'J' AND PESSOAJURIDICA.PESSOA = PESSOA.ID
        LEFT JOIN PESSOAFISICA ON PESSOA.TIPO = 'F' AND PESSOAFISICA.PESSOA = PESSOA.ID
        INNER JOIN PESQUISA ON PESQUISA.ID = NEW.PESQUISA
        INNER JOIN PRODUTO ON PRODUTO.ID = NEW.PRODUTO
        WHERE ((NEW.REPLICAR = 'S') AND (TERMINAL.ATIVO = 'S') AND (TERMINAL.DISTRIBUIDOR = PESQUISA.DISTRIBUIDOR))
        INTO :TERMINAL, :PRODUTO, :DISTRIBUIDOR
    DO BEGIN
        SCRIPT = 'EXECUTE PROCEDURE '
                || 'SET_PESQUISAPRODUTO'
                || '('
                || '''' ||:DISTRIBUIDOR || ''''
                || ', ' || NEW.ID
                || ', ' || NEW.PESQUISA
                || ', ' || '''' || :PRODUTO || ''''
                || ', ' || '''' || NEW.REGISTRARCONCORRENTE || ''''
                || ')';
        INSERT INTO SCRIPTSQL(SCRIPTSQL.TERMINAL, SCRIPTSQL.SCRIPT) VALUES (:TERMINAL, :SCRIPT);
    END
END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER trigger tri_pesquisaproduto_deletarerp for pesquisaproduto
active after delete position 0
AS
DECLARE VARIABLE TERMINAL DOM_ID;
DECLARE VARIABLE DISTRIBUIDOR DOM_STR_18_NN;
DECLARE VARIABLE SCRIPT DOM_STR_4K_NN;
BEGIN
    FOR
        SELECT TERMINAL.ID,
        CASE WHEN PESSOA.TIPO = 'J' THEN PESSOAJURIDICA.CNPJ ELSE PESSOAFISICA.CPF END AS DISTRIBUIDOR
        FROM TERMINAL
        INNER JOIN DISTRIBUIDOR ON DISTRIBUIDOR.ID = TERMINAL.DISTRIBUIDOR
        INNER JOIN PESSOA  ON PESSOA.ID = DISTRIBUIDOR.PESSOA
        LEFT JOIN PESSOAJURIDICA ON PESSOA.TIPO = 'J' AND PESSOAJURIDICA.PESSOA = PESSOA.ID
        LEFT JOIN PESSOAFISICA ON PESSOA.TIPO = 'F' AND PESSOAFISICA.PESSOA = PESSOA.ID
        INNER JOIN PESQUISA ON PESQUISA.ID = OLD.PESQUISA
        WHERE ((TERMINAL.ATIVO = 'S') AND (TERMINAL.DISTRIBUIDOR = PESQUISA.DISTRIBUIDOR))
        INTO :TERMINAL, :DISTRIBUIDOR
    DO BEGIN
        SCRIPT = 'EXECUTE PROCEDURE '
                || 'DEL_PESQUISAPRODUTO'
                || '('
                || '''' ||:DISTRIBUIDOR || ''''
                || ', ' || OLD.ID
                || ', ' || OLD.PESQUISA
                || ')';
        INSERT INTO SCRIPTSQL(SCRIPTSQL.TERMINAL, SCRIPTSQL.SCRIPT) VALUES (:TERMINAL, :SCRIPT);
    END
END^

SET TERM ; ^

CREATE TABLE TIPOACAO (
    ID DOM_ID GENERATED BY DEFAULT AS IDENTITY,
    NOME DOM_STR_60_NN);

ALTER TABLE TIPOACAO
ADD CONSTRAINT PK_TIPOACAO
PRIMARY KEY (ID);

CREATE TABLE MOTIVOREJEITARPESQUISA (
    ID DOM_ID GENERATED BY DEFAULT AS IDENTITY,
    NOME DOM_STR_60_NN);

ALTER TABLE MOTIVOREJEITARPESQUISA
ADD CONSTRAINT PK_MOTIVOREJEITARPESQUISA
PRIMARY KEY (ID);



CREATE TABLE PESQUISAREALIZADA (
    ID DOM_UUID_NN NOT NULL,
    PESQUISACLIENTE DOM_ID,
    PESQUISAPRODUTO DOM_ID,
    TIPOACAO DOM_ID,
    MOTIVOREJEITARPESQUISA DOM_ID_ISN,
    DATAREALIZADA DOM_DAT,
    VALORNORMAL DOM_NUM_2D,
    VALORACAO DOM_NUM_2D,
    OBS DOM_STR_256,
    ACAOCONCORRENTE DOM_STR_01_NN);

ALTER TABLE PESQUISAREALIZADA
ADD CONSTRAINT PK_PESQUISAREALIZADA
PRIMARY KEY (ID);

ALTER TABLE PESQUISAREALIZADA
ADD CONSTRAINT FK_PESQUISAREALIZADA_PESQCLIENT
FOREIGN KEY (PESQUISACLIENTE)
REFERENCES PESQUISACLIENTE(ID);

ALTER TABLE PESQUISAREALIZADA
ADD CONSTRAINT FK_PESQUISAREALIZADA_PESQPRODUT
FOREIGN KEY (PESQUISAPRODUTO)
REFERENCES PESQUISAPRODUTO(ID);

ALTER TABLE PESQUISAREALIZADA
ADD CONSTRAINT FK_PESQUISAREALIZADA_TIPOACAO
FOREIGN KEY (TIPOACAO)
REFERENCES TIPOACAO(ID);

ALTER TABLE PESQUISAREALIZADA
ADD CONSTRAINT FK_PESQUISAREALIZADA_MOTREJPES
FOREIGN KEY (MOTIVOREJEITARPESQUISA)
REFERENCES MOTIVOREJEITARPESQUISA(ID);




SET TERM ^ ;

CREATE OR ALTER procedure set_pesquisarealizada (
    uuid dom_uuid_char,
    distribuidor dom_str_18_nn,
    idpesquisacliente dom_id,
    idpesquisaproduto dom_id,
    tipoacao dom_id,
    motivorejeitarpesquisa dom_id_isn,
    datarealizada dom_dat,
    valornormal dom_num_2d,
    valoracao dom_num_2d,
    obs dom_str_256,
    acaoconcorrente dom_str_01)
returns (
    id dom_uuid_nn)
as
declare variable iddistribuidor dom_id_isn;
BEGIN
    SELECT ID FROM GET_DISTRIBUIDOR(:DISTRIBUIDOR) INTO :IDDISTRIBUIDOR;
    IF (:IDDISTRIBUIDOR IS NULL) THEN
        EXCEPTION EXCEPTION_DISTRIBUIDORINVALIDO;

    UPDATE OR INSERT INTO PESQUISAREALIZADA(PESQUISAREALIZADA.ID, PESQUISAREALIZADA.PESQUISACLIENTE, PESQUISAREALIZADA.PESQUISAPRODUTO, PESQUISAREALIZADA.TIPOACAO,
                                            PESQUISAREALIZADA.MOTIVOREJEITARPESQUISA, PESQUISAREALIZADA.DATAREALIZADA, PESQUISAREALIZADA.VALORNORMAL, PESQUISAREALIZADA.VALORACAO,
                                            PESQUISAREALIZADA.OBS, PESQUISAREALIZADA.ACAOCONCORRENTE)
    VALUES (CHAR_TO_UUID(:UUID), :IDPESQUISACLIENTE, :IDPESQUISAPRODUTO, :TIPOACAO, :MOTIVOREJEITARPESQUISA, :DATAREALIZADA, :VALORNORMAL, :VALORACAO, :OBS, :ACAOCONCORRENTE)
    MATCHING (PESQUISAREALIZADA.ID)
    RETURNING PESQUISAREALIZADA.ID INTO :ID;
    SUSPEND;
END^

SET TERM ; ^

CREATE TABLE MARCACONCORRENTE (
    ID DOM_ID GENERATED BY DEFAULT AS IDENTITY,
    NOME DOM_STR_60_NN);

ALTER TABLE MARCACONCORRENTE
ADD CONSTRAINT PK_MARCACONCORRENTE
PRIMARY KEY (ID);

CREATE TABLE PRODUTOMARCACONCORRENTE (
    PRODUTO DOM_ID NOT NULL,
    MARCACONCORRENTE DOM_ID NOT NULL,
	REPLICAR DOM_STR_01);

ALTER TABLE PRODUTOMARCACONCORRENTE
ADD CONSTRAINT PK_PRODUTOMARCACONCORRENTE
PRIMARY KEY (PRODUTO,MARCACONCORRENTE);

ALTER TABLE PRODUTOMARCACONCORRENTE
ADD CONSTRAINT FK_PRODUTOMARCACONCORRENTE_PROD
FOREIGN KEY (PRODUTO)
REFERENCES PRODUTO(ID);

ALTER TABLE PRODUTOMARCACONCORRENTE
ADD CONSTRAINT FK_PRODUTOMARCACONCORRENTE_MARC
FOREIGN KEY (MARCACONCORRENTE)
REFERENCES MARCACONCORRENTE(ID);


SET TERM ^ ;

CREATE trigger tri_prodmarcaconc_biu for produtomarcaconcorrente
active before insert or update position 0
AS
BEGIN
    NEW.REPLICAR = 'S';
END^

SET TERM ; ^

SET TERM ^ ;

CREATE trigger tri_prodmarcaconc_replicar for produtomarcaconcorrente
active before insert or update position 99
AS
BEGIN
    NEW.REPLICAR = 'N';
END^

SET TERM ; ^

SET TERM ^ ;

CREATE trigger tri_prodmarcaconc_replicarerp for produtomarcaconcorrente
active before insert or update position 10
AS
DECLARE VARIABLE TERMINAL DOM_ID;
DECLARE VARIABLE DISTRIBUIDOR DOM_STR_18_NN;
declare variable PRODUTO DOM_STR_14_NN;
DECLARE VARIABLE SCRIPT DOM_STR_4K_NN;
BEGIN
    FOR
        SELECT TERMINAL.ID, CASE WHEN PESSOA.TIPO = 'J' THEN PESSOAJURIDICA.CNPJ ELSE PESSOAFISICA.CPF END AS DISTRIBUIDOR,
        PRODUTO.BARRAS
        FROM TERMINAL
        INNER JOIN DISTRIBUIDOR ON DISTRIBUIDOR.ID = TERMINAL.DISTRIBUIDOR
        INNER JOIN PESSOA ON PESSOA.ID = DISTRIBUIDOR.PESSOA
        LEFT JOIN PESSOAJURIDICA ON PESSOA.TIPO = 'J' AND PESSOAJURIDICA.PESSOA = PESSOA.ID
        LEFT JOIN PESSOAFISICA ON PESSOA.TIPO = 'F' AND PESSOAFISICA.PESSOA = PESSOA.ID
        INNER JOIN PRODUTO ON PRODUTO.ID = NEW.PRODUTO
        WHERE ((NEW.REPLICAR = 'S') AND (TERMINAL.ATIVO = 'S'))
        INTO :TERMINAL, :DISTRIBUIDOR, PRODUTO
    DO BEGIN
        SCRIPT = 'EXECUTE PROCEDURE '
                || 'SET_PRODUTOMARCACONCORRENTE'
                || '('
                || '''' ||:DISTRIBUIDOR || ''''
                || ', ' || '''' || :PRODUTO || ''''
                || ', ' || NEW.MARCACONCORRENTE
                || ')';
        INSERT INTO SCRIPTSQL(SCRIPTSQL.TERMINAL, SCRIPTSQL.SCRIPT) VALUES (:TERMINAL, :SCRIPT);
    END
END^

SET TERM ; ^

SET TERM ^ ;

CREATE trigger tri_prodmarcaconc_deletarerp for produtomarcaconcorrente
active after delete position 0
AS
DECLARE VARIABLE TERMINAL DOM_ID;
DECLARE VARIABLE DISTRIBUIDOR DOM_STR_18_NN;
DECLARE VARIABLE PRODUTO DOM_STR_14_NN;
DECLARE VARIABLE SCRIPT DOM_STR_4K_NN;
BEGIN
    FOR
        SELECT TERMINAL.ID,
        CASE WHEN PESSOA.TIPO = 'J' THEN PESSOAJURIDICA.CNPJ ELSE PESSOAFISICA.CPF END AS DISTRIBUIDOR,
        PRODUTO.BARRAS
        FROM TERMINAL
        INNER JOIN DISTRIBUIDOR ON DISTRIBUIDOR.ID = TERMINAL.DISTRIBUIDOR
        INNER JOIN PESSOA  ON PESSOA.ID = DISTRIBUIDOR.PESSOA
        LEFT JOIN PESSOAJURIDICA ON PESSOA.TIPO = 'J' AND PESSOAJURIDICA.PESSOA = PESSOA.ID
        LEFT JOIN PESSOAFISICA ON PESSOA.TIPO = 'F' AND PESSOAFISICA.PESSOA = PESSOA.ID
        INNER JOIN PRODUTO ON PRODUTO.ID = OLD.PRODUTO
        WHERE ((TERMINAL.ATIVO = 'S'))
        INTO :TERMINAL, :DISTRIBUIDOR, :PRODUTO
    DO BEGIN
        SCRIPT = 'EXECUTE PROCEDURE '
                || 'DEL_PRODUTOMARCACONCORRENTE'
                || '('
                || '''' || :DISTRIBUIDOR || ''''
                || ', ' || '''' || :PRODUTO || ''''
                || ', ' || OLD.MARCACONCORRENTE
                || ')';
        INSERT INTO SCRIPTSQL(SCRIPTSQL.TERMINAL, SCRIPTSQL.SCRIPT) VALUES (:TERMINAL, :SCRIPT);
    END
END^

SET TERM ; ^

CREATE TABLE PESQUISACONCORRENTE (
    ID DOM_UUID NOT NULL,
    PESQUISAREALIZADA DOM_UUID,
    TIPOACAO DOM_ID,
    MOTIVOREJEITARPESQUISA DOM_ID_ISN,
	MARCACONCORRENTE DOM_ID,
    VALORNORMAL DOM_NUM_2D,
    VALORACAO DOM_NUM_2D,
    OBS DOM_STR_256);

ALTER TABLE PESQUISACONCORRENTE
ADD CONSTRAINT PK_PESQUISACONCORRENTE
PRIMARY KEY (ID);

ALTER TABLE PESQUISACONCORRENTE
ADD CONSTRAINT FK_PESQUISACONC_PESQUISAREALIZ
FOREIGN KEY (PESQUISAREALIZADA)
REFERENCES PESQUISAREALIZADA(ID);

ALTER TABLE PESQUISACONCORRENTE
ADD CONSTRAINT FK_PESQUISACONC_TIPOACAO
FOREIGN KEY (TIPOACAO)
REFERENCES TIPOACAO(ID);

ALTER TABLE PESQUISACONCORRENTE
ADD CONSTRAINT FK_PESQUISACONC_MOTIVOREJPES
FOREIGN KEY (MOTIVOREJEITARPESQUISA)
REFERENCES MOTIVOREJEITARPESQUISA(ID);

ALTER TABLE PESQUISACONCORRENTE
ADD CONSTRAINT FK_PESQUISACONC_MARCACONC
FOREIGN KEY (MARCACONCORRENTE)
REFERENCES MARCACONCORRENTE(ID);

SET TERM ^ ;

CREATE OR ALTER procedure set_pesquisaconcorrente (
    uuid dom_uuid_char,
    pesquisarealizada dom_uuid_char,
    distribuidor dom_str_18_nn,
    tipoacao dom_id,
    motivorejeitarpesquisa dom_id_isn,
    marcaconcorrente dom_id,
    valornormal dom_num_2d,
    valoracao dom_num_2d,
    obs dom_str_256)
returns (
    id dom_uuid_nn)
as
declare variable iddistribuidor dom_id_isn;
BEGIN
    SELECT ID FROM GET_DISTRIBUIDOR(:DISTRIBUIDOR) INTO :IDDISTRIBUIDOR;
    IF (:IDDISTRIBUIDOR IS NULL) THEN
        EXCEPTION EXCEPTION_DISTRIBUIDORINVALIDO;

    UPDATE OR INSERT INTO PESQUISACONCORRENTE(PESQUISACONCORRENTE.ID, PESQUISACONCORRENTE.PESQUISAREALIZADA, PESQUISACONCORRENTE.TIPOACAO, PESQUISACONCORRENTE.MOTIVOREJEITARPESQUISA,
                                              PESQUISACONCORRENTE.MARCACONCORRENTE, PESQUISACONCORRENTE.VALORNORMAL, PESQUISACONCORRENTE.VALORACAO, PESQUISACONCORRENTE.OBS)
    VALUES (CHAR_TO_UUID(:UUID), CHAR_TO_UUID(:PESQUISAREALIZADA), :TIPOACAO, :MOTIVOREJEITARPESQUISA, :MARCACONCORRENTE, :VALORNORMAL, :VALORACAO, :OBS)
    MATCHING (PESQUISACONCORRENTE.ID)
    RETURNING PESQUISACONCORRENTE.ID INTO :ID;
    SUSPEND;
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER procedure set_pesquisafinalizada (
    id dom_id,
    distribuidor dom_str_18_nn,
    finalizada dom_str_01_nn)
as
declare variable iddistribuidor dom_id_isn;
BEGIN
    SELECT ID FROM GET_DISTRIBUIDOR(:DISTRIBUIDOR) INTO :IDDISTRIBUIDOR;
    IF (:IDDISTRIBUIDOR IS NULL) THEN
        EXCEPTION EXCEPTION_DISTRIBUIDORINVALIDO;

    UPDATE PESQUISA SET PESQUISA.FINALIZADA = :FINALIZADA
    WHERE PESQUISA.ID = :ID
    AND PESQUISA.DISTRIBUIDOR = :IDDISTRIBUIDOR;
END^

SET TERM ; ^





