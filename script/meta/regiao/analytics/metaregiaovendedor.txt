CREATE TABLE METAREGIAOVENDEDOR (
    ID DOM_ID,
    META DOM_ID,
    REGIAO DOM_ID,
    VENDEDOR DOM_ID,
    VALOR DOM_NUM_2D_NN,
    QUANTIDADE DOM_NUM_3D_NN,
    PESOBRUTO DOM_NUM_3D_NN,
    VOLUME DOM_INT_NN,
    POSITIVACAO DOM_INT_NN);

CREATE SEQUENCE GEN_METAREGIAOVENDEDOR_ID;

SET TERM ^ ;

CREATE TRIGGER TRI_METAREGIAOVENDEDOR_BI FOR METAREGIAOVENDEDOR
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_METAREGIAOVENDEDOR_ID,1);
END^

SET TERM ; ^

ALTER TABLE METAREGIAOVENDEDOR
ADD CONSTRAINT PK_METAREGIAOVENDEDOR
PRIMARY KEY (ID);

ALTER TABLE METAREGIAOVENDEDOR
ADD CONSTRAINT FK_METAREGIAOVENDEDOR_META
FOREIGN KEY (META)
REFERENCES META(ID);

ALTER TABLE METAREGIAOVENDEDOR
ADD CONSTRAINT FK_METAREGIAOVENDEDOR_REGIAO
FOREIGN KEY (REGIAO)
REFERENCES REGIAO(ID);

ALTER TABLE METAREGIAOVENDEDOR
ADD CONSTRAINT FK_METAREGIAOVENDEDOR_VEND
FOREIGN KEY (VENDEDOR)
REFERENCES VENDEDOR(ID);

ALTER TABLE METAREGIAOVENDEDOR
ADD CONSTRAINT UNQ_METAREGIAOVENDEDOR
UNIQUE (META,REGIAO,VENDEDOR);


SET TERM ^ ;

CREATE OR ALTER procedure set_bi_metaregiaovendedor (
    distribuidor dom_str_18_nn,
    meta dom_id,
    vendedor dom_str_18_nn,
    regiao dom_id,
    valor dom_num_2d_nn,
    quantidade dom_num_3d_nn,
    pesobruto dom_num_3d_nn,
    volume dom_int_nn,
    positivacao dom_int_nn)
returns (
    id dom_id)
as
declare variable iddistribuidor dom_id_isn;
declare variable idvendedor dom_id_isn;
declare variable idmeta dom_id_isn;
BEGIN
    SELECT ID FROM GET_DISTRIBUIDOR(:DISTRIBUIDOR) INTO :IDDISTRIBUIDOR;
    IF (:IDDISTRIBUIDOR IS NULL) THEN
        EXCEPTION EXCEPTION_DISTRIBUIDORINVALIDO;

    SELECT ID FROM GET_VENDEDOR(:IDDISTRIBUIDOR, :VENDEDOR) INTO :IDVENDEDOR;
    IF (:IDVENDEDOR IS NULL) THEN
        EXCEPTION EXCEPTION_VENDEDORINVALIDO;

    SELECT ID FROM GET_META(:IDDISTRIBUIDOR, :META) INTO :IDMETA;
    IF (:IDMETA IS NULL) THEN
        EXCEPTION EXCEPTION_METAINVALIDA;

    UPDATE OR INSERT INTO METAREGIAOVENDEDOR(META, REGIAO, VENDEDOR, VALOR, QUANTIDADE, PESOBRUTO, VOLUME, POSITIVACAO)
    VALUES (:IDMETA, :REGIAO, :IDVENDEDOR,  :VALOR, :QUANTIDADE, :PESOBRUTO, :VOLUME, :POSITIVACAO)
    MATCHING (META, REGIAO, VENDEDOR)
    RETURNING ID INTO :ID;

    SUSPEND;
END^

SET TERM ; ^

