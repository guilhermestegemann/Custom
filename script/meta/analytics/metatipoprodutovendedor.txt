CREATE TABLE METATIPOPRODUTOVENDEDOR (
    ID DOM_ID,
    META DOM_ID,
    TIPOPRODUTO DOM_ID,
    VENDEDOR DOM_ID,
    VALOR DOM_NUM_2D_NN,
    QUANTIDADE DOM_NUM_3D_NN,
    PESOBRUTO DOM_NUM_3D_NN,
    VOLUME DOM_INT_NN,
    POSITIVACAO DOM_INT_NN);

CREATE SEQUENCE GEN_METATIPOPRODUTOVENDEDOR_ID;

SET TERM ^ ;

CREATE TRIGGER TRI_METATIPOPRODUTOVENDEDOR_BI FOR METATIPOPRODUTOVENDEDOR
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_METATIPOPRODUTOVENDEDOR_ID,1);
END^

SET TERM ; ^

ALTER TABLE METATIPOPRODUTOVENDEDOR
ADD CONSTRAINT PK_METATIPOPRODUTOVENDEDOR
PRIMARY KEY (ID);

ALTER TABLE METATIPOPRODUTOVENDEDOR
ADD CONSTRAINT FK_METATIPOPRODUTOVENDEDOR_META
FOREIGN KEY (META)
REFERENCES META(ID);

ALTER TABLE METATIPOPRODUTOVENDEDOR
ADD CONSTRAINT FK_METATIPOPRODUTOVEND_TIPOPROD
FOREIGN KEY (TIPOPRODUTO)
REFERENCES TIPOPRODUTO(ID);

ALTER TABLE METATIPOPRODUTOVENDEDOR
ADD CONSTRAINT FK_METATIPOPRODUTOVENDEDOR_VEND
FOREIGN KEY (VENDEDOR)
REFERENCES VENDEDOR(ID);

ALTER TABLE METATIPOPRODUTOVENDEDOR
ADD CONSTRAINT UNQ_METATIPOPRODUTOVENDEDOR
UNIQUE (META,TIPOPRODUTO,VENDEDOR);

SET TERM ^ ;

CREATE OR ALTER procedure set_bi_metatipoprodutovendedor (
    distribuidor dom_str_18_nn,
    meta dom_id,
    vendedor dom_str_18_nn,
    tipoproduto dom_id,
    valor dom_num_2d_nn,
    quantidade dom_num_3d_nn,
    pesobruto dom_num_3d_nn,
    volume dom_int_nn,
    positivacao dom_int_nn)
returns (
    id dom_id)
as
declare variable iddistribuidor dom_id_isn;
declare variable idvendedor dom_id_isn;
declare variable idmeta dom_id_isn;
BEGIN
    SELECT ID FROM GET_DISTRIBUIDOR(:DISTRIBUIDOR) INTO :IDDISTRIBUIDOR;
    IF (:IDDISTRIBUIDOR IS NULL) THEN
        EXCEPTION EXCEPTION_DISTRIBUIDORINVALIDO;

    SELECT ID FROM GET_VENDEDOR(:IDDISTRIBUIDOR, :VENDEDOR) INTO :IDVENDEDOR;
    IF (:IDVENDEDOR IS NULL) THEN
        EXCEPTION EXCEPTION_VENDEDORINVALIDO;

    SELECT ID FROM GET_META(:IDDISTRIBUIDOR, :META) INTO :IDMETA;
    IF (:IDMETA IS NULL) THEN
        EXCEPTION EXCEPTION_METAINVALIDA;

    UPDATE OR INSERT INTO METATIPOPRODUTOVENDEDOR(META, TIPOPRODUTO, VENDEDOR, VALOR, QUANTIDADE, PESOBRUTO, VOLUME, POSITIVACAO)
    VALUES (:IDMETA, :TIPOPRODUTO, :IDVENDEDOR,  :VALOR, :QUANTIDADE, :PESOBRUTO, :VOLUME, :POSITIVACAO)
    MATCHING (META, TIPOPRODUTO, VENDEDOR)
    RETURNING ID INTO :ID;

    SUSPEND;
END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER procedure del_bi_metatipoprodutovendedor (
    meta dom_id_isn,
    distribuidor dom_str_18_nn,
    vendedor dom_str_18_nn,
    tipoproduto dom_id)
as
declare variable iddistribuidor dom_id_isn;
declare variable idvendedor dom_id_isn;
declare variable idmeta dom_id_isn;
BEGIN
    SELECT ID FROM GET_DISTRIBUIDOR(:DISTRIBUIDOR) INTO :IDDISTRIBUIDOR;
    IF (:IDDISTRIBUIDOR IS NULL) THEN
        EXCEPTION EXCEPTION_DISTRIBUIDORINVALIDO;

    SELECT ID FROM GET_VENDEDOR(:IDDISTRIBUIDOR, :VENDEDOR) INTO :IDVENDEDOR;
    IF (:IDVENDEDOR IS NULL) THEN
        EXCEPTION EXCEPTION_VENDEDORINVALIDO;

    SELECT ID FROM GET_META(:IDDISTRIBUIDOR, :META) INTO :IDMETA;
    IF (:IDMETA IS NULL) THEN
        EXCEPTION EXCEPTION_METAINVALIDA;

    DELETE FROM METATIPOPRODUTOVENDEDOR
    WHERE METATIPOPRODUTOVENDEDOR.META = :IDMETA
    AND METATIPOPRODUTOVENDEDOR.TIPOPRODUTO = :TIPOPRODUTO
    AND METATIPOPRODUTOVENDEDOR.VENDEDOR = :IDVENDEDOR;
END^

SET TERM ; ^



