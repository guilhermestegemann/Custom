ALTER TABLE ITEMROMANEIO
ADD IDNF DOMAIN_ID;

ALTER TABLE ITEMROMANEIO
ADD CONSTRAINT FK_ITEMROMANEIO_IDNF
FOREIGN KEY (IDNF)
REFERENCES NF(ID);



ALTER TABLE ITEMROMANEIO
ADD IDPEDIDO DOMAIN_UUID;

ALTER TABLE ITEMROMANEIO
ADD CONSTRAINT FK_ITEMROMANEIO_IDPEDIDO
FOREIGN KEY (IDPEDIDO)
REFERENCES PEDIDO(ID);



ALTER TRIGGER TRIGGER_ITEMROMANEIO_BI INACTIVE; COMMIT;

ALTER TRIGGER TRIGGER_ITEMROMANEIO_PEDIDO INACTIVE; COMMIT;

ALTER TRIGGER TRIGGER_ITEMROMANEIO_FINANCEIRO INACTIVE; COMMIT;

ALTER TRIGGER TRIGGER_ITEMROMANEIO_AI_NF INACTIVE; COMMIT;

ALTER TRIGGER TRIGGER_ITEMROMANEIO_AU INACTIVE; COMMIT;

ALTER TRIGGER TRIGGER_ITEMROMANEIO_NF INACTIVE; COMMIT;


UPDATE ITEMROMANEIO SET ITEMROMANEIO.IDPEDIDO = (
    SELECT PEDIDO.ID
    FROM PEDIDO
    INNER JOIN ROMANEIO ON ROMANEIO.CODIGO = ITEMROMANEIO.ROMANEIO
    WHERE PEDIDO.NUMERO = ITEMROMANEIO.NUMERO
    AND PEDIDO.FILIAL = ROMANEIO.FILIAL
) WHERE ITEMROMANEIO.TIPO = 'P'; COMMIT;

UPDATE ITEMROMANEIO SET ITEMROMANEIO.IDNF = (
    SELECT NF.ID
    FROM NF
    INNER JOIN ROMANEIO ON ROMANEIO.CODIGO = ITEMROMANEIO.ROMANEIO
    WHERE NF.NUMERO = ITEMROMANEIO.NUMERO
    AND NF.FILIAL = ROMANEIO.FILIAL
    AND NF.SERIE = ITEMROMANEIO.SERIE
    AND NF.ORIGEM = 'P'
) WHERE ITEMROMANEIO.TIPO = 'N'; COMMIT;



ALTER TRIGGER TRIGGER_ITEMROMANEIO_BI ACTIVE; COMMIT;

ALTER TRIGGER TRIGGER_ITEMROMANEIO_PEDIDO ACTIVE; COMMIT;

ALTER TRIGGER TRIGGER_ITEMROMANEIO_FINANCEIRO ACTIVE; COMMIT;

ALTER TRIGGER TRIGGER_ITEMROMANEIO_AI_NF ACTIVE; COMMIT;

ALTER TRIGGER TRIGGER_ITEMROMANEIO_AU ACTIVE; COMMIT;

ALTER TRIGGER TRIGGER_ITEMROMANEIO_NF ACTIVE; COMMIT;


ALTER TRIGGER TRIGGER_CUSTOM_FIN_ROMANEIO INACTIVE; COMMIT;


SET TERM ^ ;

CREATE OR ALTER TRIGGER TRIGGER_ITEMROMANEIO_BI FOR ITEMROMANEIO
ACTIVE BEFORE INSERT OR UPDATE POSITION 0
AS
    DECLARE VARIABLE EMISSAO DATE;
    DECLARE VARIABLE DATALIMITE DATE;
BEGIN
    IF ((NEW.ITEM IS NULL) OR (NEW.ITEM = 0)) THEN
        NEW.ITEM = GEN_ID(GENERATOR_ITEMROMANEIO,1);
    /*LIMITAR PERIODO PARA INCLUIR DOCUMENTO NO ROMANEIO*/
    IF (NEW.TIPO = 'P') THEN
        SELECT PEDIDO.ID, PEDIDO.EMISSAO, ROMANEIO.DATA - FILIAL.FATURAMENTOPRAZOLIMITEEMISSAO
        FROM PEDIDO
        INNER JOIN ROMANEIO ON ROMANEIO.CODIGO = NEW.ROMANEIO
        INNER JOIN FILIAL ON FILIAL.CODIGO = ROMANEIO.FILIAL
        WHERE PEDIDO.NUMERO = NEW.NUMERO
        AND PEDIDO.FILIAL = ROMANEIO.FILIAL
        INTO NEW.IDPEDIDO, :EMISSAO, :DATALIMITE;

    IF (NEW.TIPO = 'N') THEN
        SELECT NF.ID, NF.EMISSAO, ROMANEIO.DATA - FILIAL.FATURAMENTOPRAZOLIMITEEMISSAO
        FROM NF
        INNER JOIN ROMANEIO ON ROMANEIO.CODIGO = NEW.ROMANEIO
        INNER JOIN FILIAL ON FILIAL.CODIGO = ROMANEIO.FILIAL
        WHERE NF.NUMERO = NEW.NUMERO
        AND NF.SERIE = NEW.SERIE
        AND NF.FILIAL = ROMANEIO.FILIAL
        AND NF.ORIGEM = 'P'
        INTO NEW.IDNF, :EMISSAO, :DATALIMITE;

    IF (:EMISSAO < :DATALIMITE) THEN
        EXCEPTION EXCEPTION_DATALIMITE;
END^

SET TERM ; ^


SET TERM ^ ;

CREATE OR ALTER TRIGGER TRIGGER_FINANCEIRO_ROMANEIO FOR FINANCEIRO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
     /*IF (NEW.DOCUMENTO IS NOT NULL) THEN BEGIN
         SELECT MAX(ROMANEIO)
         FROM (
             SELECT CASE WHEN(IRN.ROMANEIO IS NULL) THEN IRP.ROMANEIO ELSE IRN.ROMANEIO END AS ROMANEIO
             FROM NF
             LEFT JOIN PEDIDO ON PEDIDO.NUMERO = NF.PEDIDO
                             AND PEDIDO.FILIAL = NF.FILIALPEDIDO
             LEFT JOIN ITEMROMANEIO IRP ON IRP.TIPO = 'P'
                                       AND IRP.NUMERO = PEDIDO.NUMERO
             LEFT JOIN ITEMROMANEIO IRN ON IRN.TIPO = 'N'
                                       AND IRN.NUMERO = NF.NUMERO
                                       AND IRN.SERIE = NF.SERIE
             WHERE ( NF.NUMERO = NEW.DOCUMENTO
                 AND NF.FILIAL = NEW.FILIAL
                 AND NF.CLIFOR = NEW.CLIFOR
                 AND NF.EMISSAO = NEW.DATAEMISSAO
                 AND NF.ORIGEM = 'P')
             AND ((IRP.ROMANEIO IS NOT NULL) OR (IRN.ROMANEIO IS NOT NULL))
         ) INTO NEW.ROMANEIO;
     END */
     IF (NEW.IDNF IS NOT NULL) THEN
        SELECT MAX(ITEMROMANEIO.ROMANEIO)
        FROM ITEMROMANEIO
        WHERE ITEMROMANEIO.IDNF = NEW.IDNF
        INTO NEW.ROMANEIO;
     IF (NEW.IDPEDIDO IS NOT NULL) THEN
        SELECT MAX(ITEMROMANEIO.ROMANEIO)
        FROM ITEMROMANEIO
        WHERE ITEMROMANEIO.IDPEDIDO = NEW.IDPEDIDO
        INTO NEW.ROMANEIO;
END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER TRIGGER TRIGGER_CUSTOM_ITEMROMANEIO_FIN FOR ITEMROMANEIO
ACTIVE AFTER INSERT OR UPDATE OR DELETE POSITION 1
AS
DECLARE VARIABLE VAR_ROMANEIO INTEGER;
DECLARE VARIABLE VAR_FILIAL INTEGER;
DECLARE VARIABLE VAR_FILIAL_ROMANEIO INTEGER;
DECLARE VARIABLE VAR_CLIFOR INTEGER;
DECLARE VARIABLE VAR_ORDEM VARCHAR(20);
DECLARE VARIABLE VAR_DATAEMISSAO DATE;
BEGIN
    IF ((INSERTING) OR (UPDATING))  THEN BEGIN
        UPDATE FINANCEIRO
            SET FINANCEIRO.ROMANEIO = NEW.ROMANEIO
        WHERE ((FINANCEIRO.IDPEDIDO = NEW.IDPEDIDO) OR (FINANCEIRO.IDNF = NEW.IDNF));
        /*SELECT ROMANEIO.FILIAL FROM ROMANEIO WHERE ROMANEIO.CODIGO = NEW.ROMANEIO INTO :VAR_FILIAL_ROMANEIO;
        IF (NEW.TIPO = 'P') THEN BEGIN
            FOR
                SELECT FILIAL, CLIFOR, ORDEM, DATAEMISSAO
                FROM (
                    SELECT FINANCEIRO.FILIAL, FINANCEIRO.CLIFOR, FINANCEIRO.ORDEM, FINANCEIRO.DATAEMISSAO
                    FROM FINANCEIRO
                    INNER JOIN PEDIDO ON PEDIDO.NUMERO = FINANCEIRO.DOCUMENTO
                           AND PEDIDO.FILIAL = FINANCEIRO.FILIAL
                           AND PEDIDO.CLIFOR = FINANCEIRO.CLIFOR
                           AND PEDIDO.EMISSAO = FINANCEIRO.DATAEMISSAO
                    WHERE PEDIDO.NUMERO = NEW.NUMERO AND PEDIDO.FILIAL = :VAR_FILIAL_ROMANEIO
                ) GROUP BY FILIAL, CLIFOR, ORDEM, DATAEMISSAO
                INTO :VAR_FILIAL, :VAR_CLIFOR, :VAR_ORDEM, :VAR_DATAEMISSAO
            DO BEGIN
                UPDATE FINANCEIRO SET FINANCEIRO.ROMANEIO = NEW.ROMANEIO
                WHERE FINANCEIRO.FILIAL = :VAR_FILIAL
                AND FINANCEIRO.CLIFOR = :VAR_CLIFOR
                AND FINANCEIRO.ORDEM = :VAR_ORDEM
                AND FINANCEIRO.DATAEMISSAO = :VAR_DATAEMISSAO;
            END
        END*/
    END
    IF (DELETING) THEN BEGIN
        UPDATE FINANCEIRO
            SET FINANCEIRO.ROMANEIO = NULL
        WHERE ((FINANCEIRO.IDPEDIDO = OLD.IDPEDIDO) OR (FINANCEIRO.IDNF = OLD.IDNF));
        /*SELECT ROMANEIO.FILIAL FROM ROMANEIO WHERE ROMANEIO.CODIGO = OLD.ROMANEIO INTO :VAR_FILIAL_ROMANEIO;
        IF (OLD.TIPO = 'P') THEN BEGIN
            FOR
                SELECT FILIAL, CLIFOR, ORDEM, DATAEMISSAO, MAX(ROMANEIO) AS ROMANEIO
                FROM (
                SELECT FINANCEIRO.FILIAL
                     , FINANCEIRO.CLIFOR
                     , FINANCEIRO.ORDEM
                     , FINANCEIRO.DATAEMISSAO
                     , ITEMROMANEIO.ROMANEIO
                FROM FINANCEIRO
                INNER JOIN PEDIDO ON PEDIDO.OD = FINANCEIRO.DOCUMENTO
                                 AND PEDIDO.FILIAL = FINANCEIRO.FILIAL
                                 AND PEDIDO.CLIFOR = FINANCEIRO.CLIFOR
                                 AND PEDIDO.EMISSAO = FINANCEIRO.DATAEMISSAO
                LEFT JOIN ITEMROMANEIO ON ITEMROMANEIO.TIPO = 'P' AND ITEMROMANEIO.NUMERO = PEDIDO.NUMERO
                WHERE (PEDIDO.NUMERO = OLD.NUMERO AND PEDIDO.FILIAL = :VAR_FILIAL_ROMANEIO)
                )
                GROUP BY FILIAL, CLIFOR, ORDEM, DATAEMISSAO
                INTO :VAR_FILIAL, :VAR_CLIFOR, :VAR_ORDEM, :VAR_DATAEMISSAO, :VAR_ROMANEIO
            DO BEGIN
                UPDATE FINANCEIRO SET FINANCEIRO.ROMANEIO = :VAR_ROMANEIO
                WHERE FINANCEIRO.FILIAL = :VAR_FILIAL
                AND FINANCEIRO.CLIFOR = :VAR_CLIFOR
                AND FINANCEIRO.ORDEM = :VAR_ORDEM
                AND FINANCEIRO.DATAEMISSAO = :VAR_DATAEMISSAO;
            END
        END*/
    END
END^

SET TERM ; ^







