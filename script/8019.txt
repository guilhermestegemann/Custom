ALTER TABLE ARMAZENAMENTO
ADD CONSTRAINT FK_ARMAZENAMENTO_VALIDADE
FOREIGN KEY (VALIDADE)
REFERENCES VALIDADE(ID)
ON DELETE SET NULL
USING INDEX FK_ARMAZENAMENTO_VALIDADE


SET TERM ^ ;

CREATE OR ALTER trigger trigger_movimentoestoque for movimentoestoque
active after insert position 0
AS
DECLARE VARIABLE VAR_CONTROLALOTEVALIDADE CHAR(1);
DECLARE VARIABLE VAR_CONTROLARLOTEVALIDADE CHAR(1);
DECLARE VARIABLE VAR_QTDEVALIDADE NUMERIC(15,3);
DECLARE VARIABLE VAR_IDESTOQUEESCRITURADO DOMAIN_BIGINT;
DECLARE VARIABLE VAR_LOCAL DOMAIN_INTEIRO;
DECLARE VARIABLE VAR_IDARMAZENAMENTO DOMAIN_BIGINT;
DECLARE VARIABLE VAR_QTDEMOVIMENTADA NUMERIC(15,3);
DECLARE VARIABLE VAR_QTDEARMAZENAMENTO NUMERIC(15,3);
DECLARE VARIABLE VAR_IDVALIDADE DOMAIN_BIGINT;
BEGIN
    IF (NEW.IMPROPRIO = 'S') THEN BEGIN
        /*Atualizar Estoque*/
        UPDATE ESTOQUE SET ESTOQUE.ESTOQUEIMPROPRIO = ESTOQUE.ESTOQUEIMPROPRIO + NEW.QTDE
        WHERE ESTOQUE.FILIAL = NEW.FILIAL AND ESTOQUE.PRODUTO = NEW.PRODUTO;
    END ELSE BEGIN
       /*Atualizar Estoque*/
        UPDATE ESTOQUE
        SET ESTOQUE.ESTOQUEATUAL = ESTOQUE.ESTOQUEATUAL + NEW.QTDE
        WHERE ESTOQUE.FILIAL = NEW.FILIAL AND ESTOQUE.PRODUTO = NEW.PRODUTO;
        /*Escriturar estoque*/
        IF (NEW.INDICADORTIPOESTOQUE = 0) THEN BEGIN
            UPDATE ESTOQUEESCRITURADO
            SET ESTOQUEESCRITURADO.QUANTIDADE = ESTOQUEESCRITURADO.QUANTIDADE + NEW.QTDE
            WHERE ESTOQUEESCRITURADO.FILIAL = NEW.FILIAL
            AND ESTOQUEESCRITURADO.PRODUTO = NEW.PRODUTO
            AND ESTOQUEESCRITURADO.INDICADORTIPOESTOQUE = NEW.INDICADORTIPOESTOQUE;
        END ELSE BEGIN
            SELECT ESTOQUEESCRITURADO.ID
            FROM ESTOQUEESCRITURADO
            WHERE ESTOQUEESCRITURADO.FILIAL = NEW.FILIAL
            AND ESTOQUEESCRITURADO.PRODUTO = NEW.PRODUTO
            AND ESTOQUEESCRITURADO.INDICADORTIPOESTOQUE = NEW.INDICADORTIPOESTOQUE
            AND ESTOQUEESCRITURADO.CLIFOR = NEW.CLIFOR
            INTO :VAR_IDESTOQUEESCRITURADO;
            IF (:VAR_IDESTOQUEESCRITURADO IS NULL) THEN BEGIN
                INSERT INTO ESTOQUEESCRITURADO (FILIAL, PRODUTO, QUANTIDADE, INDICADORTIPOESTOQUE, CLIFOR)
                        VALUES (NEW.FILIAL, NEW.PRODUTO, NEW.QTDE, NEW.INDICADORTIPOESTOQUE, NEW.CLIFOR);
            END ELSE BEGIN
                UPDATE ESTOQUEESCRITURADO
                SET ESTOQUEESCRITURADO.QUANTIDADE = ESTOQUEESCRITURADO.QUANTIDADE + NEW.QTDE
                WHERE ESTOQUEESCRITURADO.FILIAL = NEW.FILIAL
                AND ESTOQUEESCRITURADO.PRODUTO = NEW.PRODUTO
                AND ESTOQUEESCRITURADO.INDICADORTIPOESTOQUE = NEW.INDICADORTIPOESTOQUE
                AND ESTOQUEESCRITURADO.CLIFOR = NEW.CLIFOR;
            END
        END


        /*Verificar configuracao da empresa*/
        SELECT FILIAL.CONTROLALOTEVALIDADE
        FROM FILIAL
        WHERE FILIAL.CODIGO = NEW.FILIAL
        INTO :VAR_CONTROLALOTEVALIDADE;

        IF (:VAR_CONTROLALOTEVALIDADE = 'S') THEN BEGIN/*Empresa utiliza controle de lote*/
            /*Verificar cadastro do produto*/
            SELECT ESTOQUE.CONTROLARLOTEVALIDADE FROM ESTOQUE
            WHERE ESTOQUE.FILIAL = NEW.FILIAL AND ESTOQUE.PRODUTO = NEW.PRODUTO
            INTO :VAR_CONTROLARLOTEVALIDADE;
            /*Verificar se o produto e controlado*/
            IF (:VAR_CONTROLARLOTEVALIDADE = 'S') THEN BEGIN
               /*Verifica se foi lancado o lote ou a validade*/
                IF ((NEW.LOTE IS NULL) OR (NEW.VALIDADE IS NULL)) THEN
                    EXCEPTION EXCEPTION_VALIDADE;
                /*Localiza a Quantidade atual do lote*/
                SELECT VALIDADE.ID, VALIDADE.QTDE FROM VALIDADE
                WHERE VALIDADE.PRODUTO = NEW.PRODUTO
                AND VALIDADE.FILIAL = NEW.FILIAL
                AND VALIDADE.VALIDADE = NEW.VALIDADE
                AND VALIDADE.LOTE = NEW.LOTE
                AND VALIDADE.INDICADORTIPOESTOQUE = NEW.INDICADORTIPOESTOQUE
                AND ((NEW.CLIFOR IS NULL AND VALIDADE.CLIFOR IS NULL) OR (VALIDADE.CLIFOR = NEW.CLIFOR))
                INTO :VAR_IDVALIDADE, :VAR_QTDEVALIDADE;

                /*Verifica Operacao - Entrada/Saida*/
                IF (NEW.QTDE > 0) THEN BEGIN
                    IF (:VAR_IDVALIDADE IS NOT NULL) THEN BEGIN
                        UPDATE VALIDADE SET VALIDADE.QTDE = VALIDADE.QTDE + NEW.QTDE
                        WHERE VALIDADE.ID = :VAR_IDVALIDADE;
                    END ELSE BEGIN
                        INSERT INTO VALIDADE(VALIDADE.FILIAL, VALIDADE.PRODUTO, VALIDADE.VALIDADE, VALIDADE.LOTE, VALIDADE.QTDE, VALIDADE.FABRICACAO, VALIDADE.INDICADORTIPOESTOQUE, VALIDADE.CLIFOR)
                        VALUES (NEW.FILIAL, NEW.PRODUTO, NEW.VALIDADE, NEW.LOTE, NEW.QTDE, NEW.FABRICACAO, NEW.INDICADORTIPOESTOQUE, NEW.CLIFOR)
                        RETURNING VALIDADE.ID INTO :VAR_IDVALIDADE;
                    END
                END ELSE BEGIN
                    IF (:VAR_IDVALIDADE IS NOT NULL) THEN BEGIN
                        IF (:VAR_QTDEVALIDADE = (NEW.QTDE * -1)) THEN BEGIN
                            DELETE FROM VALIDADE
                            WHERE VALIDADE.ID = :VAR_IDVALIDADE;
                            VAR_IDVALIDADE = NULL;
                        END ELSE
                        IF (:VAR_QTDEVALIDADE > (NEW.QTDE * -1)) THEN BEGIN
                            UPDATE VALIDADE SET VALIDADE.QTDE = VALIDADE.QTDE + NEW.QTDE
                            WHERE VALIDADE.ID = :VAR_IDVALIDADE;
                        END ELSE
                            EXCEPTION EXCEPTION_ESTOQUEINSUFICIENTE;
                    END ELSE
                        EXCEPTION EXCEPTION_ESTOQUEINSUFICIENTE;
                END
            END -- Fim Verifica se o produto usa controle lote e validade
        END -- Fim Verfica se empresa usa controle lote e validade
        /*WMS*/
        IF (NEW.LOCAL IS NOT NULL) THEN BEGIN
            IF (NEW.QTDE > 0) THEN BEGIN
                /*Entrada*/
                SELECT FIRST 1 ARMAZENAMENTO.ID, ARMAZENAMENTO.QUANTIDADE
                FROM ARMAZENAMENTO
                INNER JOIN LOCAL ON LOCAL.CODIGO = ARMAZENAMENTO.LOCAL
                WHERE ARMAZENAMENTO.FILIAL = NEW.FILIAL
                AND ARMAZENAMENTO.PRODUTO = NEW.PRODUTO
                AND ARMAZENAMENTO.INDICADORTIPOESTOQUE = NEW.INDICADORTIPOESTOQUE
                AND COALESCE(ARMAZENAMENTO.CLIFOR,0) = COALESCE(NEW.CLIFOR,0)
                AND COALESCE(ARMAZENAMENTO.VALIDADE,0) = COALESCE(:VAR_IDVALIDADE,0)
                AND LOCAL.LOCAL = NEW.LOCAL
                ORDER BY LOCAL.PICKING DESC, ARMAZENAMENTO.QUANTIDADE
                INTO :VAR_IDARMAZENAMENTO, :VAR_QTDEARMAZENAMENTO;
                IF (:VAR_IDARMAZENAMENTO IS NULL) THEN BEGIN
                    SELECT FIRST 1 LOCAL.CODIGO
                    FROM LOCAL
                    WHERE LOCAL.LOCAL = NEW.LOCAL
                    AND LOCAL.ALOCAVEL = 'S'
                    ORDER BY LOCAL.CODIGOESTRUTURADO
                    INTO :VAR_LOCAL;
                    INSERT INTO ARMAZENAMENTO(FILIAL, LOCAL, PRODUTO, QUANTIDADE, INDICADORTIPOESTOQUE, CLIFOR, VALIDADE)
                    VALUES(NEW.FILIAL, :VAR_LOCAL, NEW.PRODUTO, NEW.QTDE, NEW.INDICADORTIPOESTOQUE, NEW.CLIFOR, :VAR_IDVALIDADE);
                END ELSE BEGIN
                    UPDATE ARMAZENAMENTO
                    SET ARMAZENAMENTO.QUANTIDADE = ARMAZENAMENTO.QUANTIDADE + NEW.QTDE
                    WHERE ARMAZENAMENTO.ID = :VAR_IDARMAZENAMENTO;
                END
            END ELSE BEGIN
                /*Saida*/
                VAR_QTDEMOVIMENTADA = 0;
                FOR
                    SELECT ARMAZENAMENTO.ID, ARMAZENAMENTO.QUANTIDADE
                    FROM ARMAZENAMENTO
                    INNER JOIN LOCAL ON LOCAL.CODIGO = ARMAZENAMENTO.LOCAL
                    WHERE ARMAZENAMENTO.FILIAL = NEW.FILIAL
                    AND ARMAZENAMENTO.PRODUTO = NEW.PRODUTO
                    AND ARMAZENAMENTO.INDICADORTIPOESTOQUE = NEW.INDICADORTIPOESTOQUE
                    AND COALESCE(ARMAZENAMENTO.CLIFOR,0) = COALESCE(NEW.CLIFOR,0)
                    AND COALESCE(ARMAZENAMENTO.VALIDADE,0) = COALESCE(:VAR_IDVALIDADE,0)
                    AND LOCAL.LOCAL = NEW.LOCAL
                    ORDER BY LOCAL.PICKING DESC, ARMAZENAMENTO.QUANTIDADE
                    INTO :VAR_IDARMAZENAMENTO, :VAR_QTDEARMAZENAMENTO
                DO BEGIN
                    IF (:VAR_QTDEARMAZENAMENTO + (NEW.QTDE - :VAR_QTDEMOVIMENTADA) > 0) THEN BEGIN
                        UPDATE ARMAZENAMENTO
                        SET ARMAZENAMENTO.QUANTIDADE = ARMAZENAMENTO.QUANTIDADE + (NEW.QTDE - :VAR_QTDEMOVIMENTADA)
                        WHERE ARMAZENAMENTO.ID = :VAR_IDARMAZENAMENTO;
                        VAR_QTDEMOVIMENTADA = NEW.QTDE;
                    END ELSE BEGIN
                        VAR_QTDEMOVIMENTADA = VAR_QTDEMOVIMENTADA - :VAR_QTDEARMAZENAMENTO;
                        UPDATE ARMAZENAMENTO
                        SET ARMAZENAMENTO.QUANTIDADE = 0
                        WHERE ARMAZENAMENTO.ID = :VAR_IDARMAZENAMENTO;
                    END
                END
                IF (:VAR_QTDEMOVIMENTADA > NEW.QTDE) THEN
                    EXCEPTION EXCEPTION_ESTOQUEINSUFICIENTE;
            END
        END -- Fim WMS
    END
END^

SET TERM ; ^

SET TERM ^ ;

CREATE OR ALTER trigger trigger_local_gerar_estruturado for local
active before insert or update position 0
AS
DECLARE VAR_CODIGOESTRUTURADO VARCHAR(20);
BEGIN
    VAR_CODIGOESTRUTURADO = '';
    NEW.CODIGOESTRUTURADO = NULL;
    IF (NEW.LOCAL IS NOT NULL) THEN
    BEGIN
        SELECT (LOCAL.CODIGOESTRUTURADO || '.') FROM LOCAL
        WHERE LOCAL.CODIGO = NEW.LOCAL
        INTO :VAR_CODIGOESTRUTURADO;
        NEW.CODIGOESTRUTURADO = :VAR_CODIGOESTRUTURADO || NEW.SEQUENCIA;
    END
END^

SET TERM ; ^

