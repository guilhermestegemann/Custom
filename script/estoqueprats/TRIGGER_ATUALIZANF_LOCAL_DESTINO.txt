SET TERM ^ ;
CREATE OR ALTER trigger trigger_atualizanf for nfactive before update position 1ASDECLARE VARIABLE VARQUANTIDADE NUMERIC(15,3);DECLARE VARIABLE VARQUANTIDADEDEVOLVIDO NUMERIC(15,3);DECLARE VARIABLE VARUNITARIO FLOAT;DECLARE VARIABLE VARVALORVENDA FLOAT;DECLARE VARIABLE VARDESCONTO FLOAT;DECLARE VARIABLE VARPRODUTO INTEGER;DECLARE VARIABLE VARTOTAL FLOAT;DECLARE VARIABLE VARVALORICMS FLOAT;DECLARE VARIABLE VARVALORIPI FLOAT;DECLARE VARIABLE VARVALORPIS FLOAT;DECLARE VARIABLE VARVALORCOFINS FLOAT;DECLARE VARIABLE VARCUSTO FLOAT;DECLARE VARIABLE VARITEM INTEGER;/*Financeiro*/DECLARE VARIABLE VARORDEM VARCHAR(15);DECLARE VARIABLE VARVCTO DATE;DECLARE VARIABLE VARVALOR FLOAT;DECLARE VARIABLE VARBAIXAR VARCHAR(1);DECLARE VARIABLE VARDATABAIXA DATE;DECLARE VARIABLE VARDATAEMISSAO DATE;DECLARE VARIABLE VARVALORDESCONTOCONCEDIDO FLOAT;DECLARE VARIABLE VARVEZES INTEGER;DECLARE VARIABLE VARCONCEDERDESCONTO VARCHAR(1);DECLARE VARIABLE VARPRIMEIROVCTO INTEGER;DECLARE VARIABLE VARFORMACONTA INTEGER;DECLARE VARIABLE VARCONTAORDEM INTEGER;DECLARE VARIABLE VARPARCELA VARCHAR(20);DECLARE VARIABLE VARCONTA INTEGER;/*Comissao*/DECLARE VARIABLE VARPERCCOMISSAO FLOAT;DECLARE VARIABLE VARPERC FLOAT;DECLARE VARIABLE VARCONTADOR INTEGER;DECLARE VARIABLE VARTABELAPRECO INTEGER;DECLARE VARIABLE VARVALORCOMISSAO NUMERIC(15,4);DECLARE VARIABLE GERARCOMISSAOFINANCEIRO VARCHAR(1);/*Clifor*/DECLARE VARIABLE VARRAPEL NUMERIC(15,2);DECLARE VARIABLE VARCIDADE INTEGER;DECLARE VARIABLE VARCOMBO INTEGER;/*Comissao Entrega*/DECLARE VARIABLE VARPERCCOMISSAOENTREGA FLOAT;/*Tipo de CFOP*/DECLARE VARIABLE VARFATURA VARCHAR(1);DECLARE VARIABLE VARTIPOCFOPGERARESTOQUE VARCHAR(1);DECLARE VARIABLE VARTIPOCFOPGERARDEVOLUCAO VARCHAR(1);DECLARE VARIABLE VARGERARCOMISSAO VARCHAR(1);DECLARE VARIABLE VARGERARESTOQUE VARCHAR(1);DECLARE VARIABLE VARGERARCONSUMO VARCHAR(1);DECLARE VARIABLE VARGERARTROCA VARCHAR(1);DECLARE VARIABLE VARZERARUNITARIO VARCHAR(1);DECLARE VARIABLE VARGERARFINANCEIRO VARCHAR(1);DECLARE VARIABLE VARGERARCAIXA VARCHAR(1);DECLARE VARIABLE VARHISTORICO INTEGER;DECLARE VARIABLE VARSITUACAO INTEGER;DECLARE VARIABLE VARGERARBONIFICACAO VARCHAR(1);DECLARE VARIABLE VARGERARESTOQUEIMPROPRIO VARCHAR(1);DECLARE VARIABLE VARGERARFIDELIZACAO VARCHAR(1);DECLARE VARIABLE VARINDICADORTIPOESTOQUE INTEGER;DECLARE VARIABLE VARLOCALORIGEM INTEGER;DECLARE VARIABLE VARLOCALDESTINO INTEGER;/*Filial*/DECLARE VARIABLE VARCONTAFILIAL INTEGER;DECLARE VARIABLE VARGERARFLEX VARCHAR(1);DECLARE VARIABLE VARTIPODATABAIXA VARCHAR(1);DECLARE VARIABLE VARCONTROLALOTEVALIDADE VARCHAR(1);DECLARE VARIABLE VARUTILIZANSU VARCHAR(1);DECLARE VARIABLE VARFINANCEIROCONCEDERDESCONTO VARCHAR(1);DECLARE VARIABLE VARPERCDESCONTOCONCEDIDO FLOAT;DECLARE VARIABLE VARUTILIZAFIDELIZACAO VARCHAR(1);DECLARE VARIABLE VARFINANCEIROGERAROBSPARCELA VARCHAR(1);DECLARE VARIABLE VARRAPELDESCONTARVALORITEM VARCHAR(1);/* Imposto */DECLARE VARIABLE VARDEBITOICMSCOMPORMARGEM VARCHAR(1);/*nsu*/DECLARE VARIABLE VARNSU NUMERIC(10,0);DECLARE VARIABLE VARREINICIO INTEGER;/*Configuracoes*/DECLARE VARIABLE VARENCARGO NUMERIC(15,3);DECLARE VARIABLE VARDESPESA NUMERIC(15,2);/*Estoque*/DECLARE VARIABLE VARCONTROLARLOTEVALIDADE VARCHAR(1);DECLARE VARIABLE VARESTOQUEATUAL NUMERIC(15,2);/*Controle de Lote e Validade*/DECLARE VARIABLE VARVALIDADE DATE;DECLARE VARIABLE VARLOTE VARCHAR(15);DECLARE VARIABLE VARQTDE NUMERIC(15,3);DECLARE VARIABLE VARFABRICACAO DATE;/*devolucao*/DECLARE VARIABLE VARMOTIVODEVOLUCAO INTEGER;DECLARE VARIABLE VARNUMERO INTEGER;DECLARE VARIABLE VARSERIE VARCHAR(5);DECLARE VARIABLE VARFILIAL INTEGER;DECLARE VARIABLE VARCLIFOR INTEGER;DECLARE VARIABLE VARMODELO VARCHAR(3);DECLARE VARIABLE VARORIGEM VARCHAR(1);DECLARE VARIABLE VARNFREFERENCIADA INTEGER;/*licitacao*/DECLARE VARIABLE VARLICITACAO INTEGER;DECLARE VARIABLE VARAUTORIZACAO VARCHAR(10);/*Flex*/DECLARE VARIABLE VARREGRADESCONTO INTEGER;BEGIN     IF ((NEW.CANCELADA <> OLD.CANCELADA) OR (NEW.IMPRESSA <> OLD.IMPRESSA) OR (NEW.ATUALIZADA <> OLD.ATUALIZADA)) THEN BEGIN        IF ((NEW.CANCELADA = 'N') AND (NEW.IMPRESSA = 'S') AND (NEW.ATUALIZADA = 'N')) THEN BEGIN           /*Tipo de CFOP*/           SELECT TIPOCFOP.FATURA, TIPOCFOP.GERARESTOQUE, TIPOCFOP.DEVOLUCAO, TIPOCFOP.INDICADORTIPOESTOQUE, TIPOCFOP.LOCALORIGEM, TIPOCFOP.LOCALDESTINO           FROM TIPOCFOP           WHERE TIPOCFOP.CODIGO = NEW.TIPOCFOP           INTO :VARFATURA, :VARTIPOCFOPGERARESTOQUE, :VARTIPOCFOPGERARDEVOLUCAO, :VARINDICADORTIPOESTOQUE, :VARLOCALORIGEM, :VARLOCALDESTINO;           IF (:VARFATURA = 'S') THEN BEGIN              NEW.ATUALIZADA = 'S';              /*Verificar refereciada*/              SELECT NFREFERENCIADA.CODIGO, NFREFERENCIADA.MOTIVODEVOLUCAO,                     NFREFERENCIADA.NUMERO, NFREFERENCIADA.SERIE, NFREFERENCIADA.FILIAL, NFREFERENCIADA.CLIFOR, NFREFERENCIADA.MODELO, NFREFERENCIADA.ORIGEM              FROM NFREFERENCIADA              WHERE NFREFERENCIADA.NFNUMERO = NEW.NUMERO              AND NFREFERENCIADA.NFSERIE = NEW.SERIE              AND NFREFERENCIADA.NFFILIAL = NEW.FILIAL              AND NFREFERENCIADA.NFORIGEM = NEW.ORIGEM              AND NFREFERENCIADA.NFCLIFOR = NEW.CLIFOR              INTO :VARNFREFERENCIADA, :VARMOTIVODEVOLUCAO,                   :VARNUMERO, :VARSERIE, :VARFILIAL, :VARCLIFOR, :VARMODELO, :VARORIGEM;              IF ((:VARMOTIVODEVOLUCAO IS NOT NULL) AND (:VARTIPOCFOPGERARESTOQUE = 'S') AND (:VARTIPOCFOPGERARDEVOLUCAO = 'S')) THEN BEGIN                 SELECT NF.TOTAL FROM NF                 WHERE NF.NUMERO = :VARNUMERO                 AND NF.SERIE = :VARSERIE                 AND NF.FILIAL = :VARFILIAL                 AND NF.ORIGEM = :VARORIGEM                 AND NF.CLIFOR = :VARCLIFOR                 AND NF.MODELO = :VARMODELO                 INTO :VARTOTAL;                 IF (:VARTOTAL = NEW.TOTAL) THEN BEGIN                   --MARCA A NF COMO DEVOLVIDA                   UPDATE NF                   SET NF.DEVOLVIDA = 'S', NF.MOTIVODEVOLUCAO = :VARMOTIVODEVOLUCAO                   WHERE NF.NUMERO = :VARNUMERO                   AND NF.SERIE = :VARSERIE                   AND NF.FILIAL = :VARFILIAL                   AND NF.CLIFOR = :VARCLIFOR                   AND NF.MODELO = :VARMODELO;                   --MARCA OS ITENS COMO DEVOLVIDO                   FOR                      SELECT  ITEMNF.PRODUTO, ITEMNF.ITEM, ITEMNF.QTDE                      FROM ITEMNF                      WHERE ITEMNF.NUMERO = :VARNUMERO                      AND ITEMNF.SERIE = :VARSERIE                      AND ITEMNF.FILIAL = :VARFILIAL                      AND ITEMNF.ORIGEM = :VARORIGEM                      AND ITEMNF.CLIFOR = :VARCLIFOR                      INTO :VARPRODUTO, :VARITEM, :VARQTDE                   DO BEGIN                       RDB$SET_CONTEXT('USER_TRANSACTION', 'NFREFERENCIADA', :VARNFREFERENCIADA);                       UPDATE OR INSERT                         INTO ITEMNFDEVOLUCAO(NUMERO, SERIE, FILIAL, ORIGEM, CLIFOR, ITEM, PRODUTO, NFREFERENCIADA, MOTIVODEVOLUCAO, QTDEDEVOLVIDO, CANCELADO)                         VALUES (:VARNUMERO, :VARSERIE, :VARFILIAL, :VARORIGEM, :VARCLIFOR, :VARITEM, :VARPRODUTO, :VARNFREFERENCIADA, :VARMOTIVODEVOLUCAO, :VARQTDE, 'N')                         MATCHING (NUMERO, SERIE, FILIAL, ORIGEM, CLIFOR, ITEM, PRODUTO, NFREFERENCIADA);                   END                 END ELSE BEGIN                   FOR                     SELECT ITEMNF.PRODUTO, ITEMNF.ITEM, ITEMNF.QTDE                     FROM ITEMNF                     WHERE ITEMNF.NUMERO = NEW.NUMERO                     AND ITEMNF.FILIAL = NEW.FILIAL                     AND ITEMNF.SERIE = NEW.SERIE                     AND ITEMNF.ORIGEM = NEW.ORIGEM                     AND ITEMNF.CLIFOR = NEW.CLIFOR                     INTO :VARPRODUTO, :VARITEM, :VARQTDE                   DO BEGIN                       RDB$SET_CONTEXT('USER_TRANSACTION', 'NFREFERENCIADA', :VARNFREFERENCIADA);                       UPDATE OR INSERT                         INTO ITEMNFDEVOLUCAO(NUMERO, SERIE, FILIAL, ORIGEM, CLIFOR, ITEM, PRODUTO, NFREFERENCIADA, MOTIVODEVOLUCAO, QTDEDEVOLVIDO, CANCELADO)                         VALUES (:VARNUMERO, :VARSERIE, :VARFILIAL, :VARORIGEM, :VARCLIFOR, :VARITEM, :VARPRODUTO, :VARNFREFERENCIADA, :VARMOTIVODEVOLUCAO, :VARQTDE, 'N')                         MATCHING (NUMERO, SERIE, FILIAL, ORIGEM, CLIFOR, ITEM, PRODUTO, NFREFERENCIADA);                   END                   VARMOTIVODEVOLUCAO = NULL;                 END              END              /*Seleciona Configuracao Filial*/              SELECT FILIAL.CONTA, FILIAL.CONTROLAFLEX, FILIAL.DATABAIXAAUTOMATICA,              FILIAL.CONTROLALOTEVALIDADE, FILIAL.UTILIZANSU,              FILIAL.FINANCEIROCONCEDERDESCONTO, FILIAL.PERCDESCONTO,              FILIAL.UTILIZAFIDELIZACAO,              FILIAL.FINANCEIROGERAROBSPARCELA, FILIAL.GERARCOMISSAOFINANCEIRO, FILIAL.RAPELDESCONTARVALORITEM              FROM FILIAL WHERE FILIAL.CODIGO = NEW.FILIAL              INTO :VARCONTAFILIAL, :VARGERARFLEX,              :VARTIPODATABAIXA, :VARCONTROLALOTEVALIDADE,              :VARUTILIZANSU,              :VARFINANCEIROCONCEDERDESCONTO, :VARPERCDESCONTOCONCEDIDO,              :VARUTILIZAFIDELIZACAO,              :VARFINANCEIROGERAROBSPARCELA, :GERARCOMISSAOFINANCEIRO, :VARRAPELDESCONTARVALORITEM;              /*Seleciona Configuracao CFOP*/              SELECT TIPOCFOP.GERARCOMISSAO, TIPOCFOP.GERARESTOQUE,              TIPOCFOP.GERARCONSUMO, TIPOCFOP.GERARTROCA, TIPOCFOP.ZERARUNITARIO,              TIPOCFOP.GERARFINANCEIRO, TIPOCFOP.GERARCAIXA, TIPOCFOP.SITUACAO,              TIPOCFOP.FATURA, TIPOCFOP.GERARBONIFICACAO, TIPOCFOP.GERARESTOQUEIMPROPRIO, TIPOCFOP.GERARFIDELIZACAO              FROM TIPOCFOP              WHERE TIPOCFOP.CODIGO = NEW.TIPOCFOP              INTO :VARGERARCOMISSAO, :VARGERARESTOQUE, :VARGERARCONSUMO,              :VARGERARTROCA, :VARZERARUNITARIO,:VARGERARFINANCEIRO, :VARGERARCAIXA,              :VARSITUACAO, :VARFATURA, :VARGERARBONIFICACAO, :VARGERARESTOQUEIMPROPRIO, :VARGERARFIDELIZACAO;              /*Gerar Flex Tipo CFOP*/              IF (:VARGERARFLEX = 'S') THEN BEGIN                 SELECT TIPOCFOP.GERARFLEX  FROM TIPOCFOP                 WHERE TIPOCFOP.CODIGO = NEW.TIPOCFOP                 INTO :VARGERARFLEX;              END              /*Verifica se gera comissao para o Vendedor*/              IF (:VARGERARCOMISSAO = 'S') THEN BEGIN                 SELECT FUNCIONARIO.GERARCOMISSAO FROM FUNCIONARIO                 WHERE FUNCIONARIO.CODIGO = NEW.FUNCIONARIO                 INTO :VARGERARCOMISSAO;              END              /*Seleciona Configuracao Encargo*/              SELECT SUM(ENCARGO.VALOR) FROM ENCARGO              WHERE ENCARGO.FILIAL = NEW.FILIAL INTO :VARENCARGO;              IF (:VARENCARGO IS NULL) THEN VARENCARGO = 0;              /*Seleciona Configuracao Despesa*/              SELECT SUM(DESPESA.VALOR) FROM DESPESA              WHERE DESPESA.FILIAL = NEW.FILIAL INTO :VARDESPESA;              IF (:VARDESPESA IS NULL) THEN VARDESPESA = 0;              /*Gerar Flex - Funcionario*/              IF (:VARGERARFLEX = 'S') THEN BEGIN                 SELECT FUNCIONARIO.GERARFLEX FROM FUNCIONARIO                 WHERE FUNCIONARIO.CODIGO = NEW.FUNCIONARIO INTO :VARGERARFLEX;              END              SELECT CLIFOR.CIDADE, CLIFOR.RAPEL FROM CLIFOR              WHERE CLIFOR.CODIGO = NEW.CLIFOR INTO :VARCIDADE, :VARRAPEL;              /*Inicio Gera Fidelizacao*/              IF (:VARUTILIZAFIDELIZACAO = 'S') THEN BEGIN                IF (:VARGERARFIDELIZACAO <> 'N') THEN BEGIN                    INSERT INTO FIDELIZACAODOCUMENTO(FIDELIZACAODOCUMENTO.CODIGO,  FIDELIZACAODOCUMENTO.TIPO, FIDELIZACAODOCUMENTO.NFNUMERO, FIDELIZACAODOCUMENTO.NFSERIE, FIDELIZACAODOCUMENTO.NFFILIAL, FIDELIZACAODOCUMENTO.NFORIGEM, FIDELIZACAODOCUMENTO.NFCLIFOR)                    VALUES (0,'NF', NEW.NUMERO, NEW.SERIE, NEW.FILIAL, NEW.ORIGEM, NEW.CLIFOR);                END              END              /*Inicio Gera Troca*/              IF (:VARGERARTROCA = 'S') THEN BEGIN                 FOR                     SELECT ITEMNF.PRODUTO, ITEMNF.QTDE, (ITEMNF.TOTAL / ITEMNF.QTDE)                     FROM ITEMNF                     WHERE (ITEMNF.NUMERO = NEW.NUMERO) AND (ITEMNF.FILIAL = NEW.FILIAL) AND (ITEMNF.SERIE = NEW.SERIE) AND (ITEMNF.ORIGEM = NEW.ORIGEM) AND (ITEMNF.CLIFOR = NEW.CLIFOR)                     INTO :VARPRODUTO,:VARQUANTIDADE,:VARUNITARIO                 DO BEGIN                     SELECT ESTOQUE.VALORMEDIO / PRODUTO.QTDETROCA                     FROM ESTOQUE                     INNER JOIN PRODUTO ON ESTOQUE.PRODUTO  = PRODUTO.CODIGO                     WHERE ESTOQUE.PRODUTO = :VARPRODUTO AND ESTOQUE.FILIAL = NEW.FILIAL                     INTO :VARCUSTO;                     IF (:VARCUSTO = 0) THEN                        SELECT ESTOQUE.VALORCUSTO / PRODUTO.QTDETROCA                        FROM ESTOQUE                        INNER JOIN PRODUTO ON ESTOQUE.PRODUTO  = PRODUTO.CODIGO                        WHERE ESTOQUE.PRODUTO = :VARPRODUTO AND ESTOQUE.FILIAL = NEW.FILIAL                        INTO :VARCUSTO;                     IF (:VARCUSTO = 0) THEN                        SELECT ESTOQUE.VALORCUSTOTABELA / PRODUTO.QTDETROCA                        FROM ESTOQUE                        INNER JOIN PRODUTO ON ESTOQUE.PRODUTO  = PRODUTO.CODIGO                        WHERE ESTOQUE.PRODUTO = :VARPRODUTO AND ESTOQUE.FILIAL = NEW.FILIAL                        INTO :VARCUSTO;                     INSERT INTO TROCA (TROCA.FILIAL, TROCA.TIPO, TROCA.DOCUMENTO, TROCA.PRODUTO, TROCA.DATA, TROCA.QTDE,    TROCA.UNITARIO, TROCA.CLIFOR, TROCA.VENDEDOR,  TROCA.CUSTO, TROCA.TRANSPORTADOR, TROCA.VEICULO)                                VALUES (NEW.FILIAL,   'NF',       NEW.NUMERO,      :VARPRODUTO,   NEW.EMISSAO,:VARQUANTIDADE,:VARUNITARIO,   NEW.CLIFOR,   NEW.FUNCIONARIO, :VARCUSTO, NEW.TRANSPORTADOR, NEW.VEICULO);                 END              END/*Fim Gerar Troca*/              /*Movimento relacionado aos produtos*/              FOR                 SELECT ITEMNF.PRODUTO, ITEMNF.ITEM, ITEMNF.QTDE, ITEMNF.UNITARIO,                 ITEMNF.VALORDESCONTO+ITEMNF.VALORDESCONTOSIMPLES+ITEMNF.VALORPUBLICA, ITEMNF.TOTAL,                 ITEMNF.VALORICMS, ITEMNF.VALORIPI, ITEMNF.VALORPIS, ITEMNF.VALORCOFINS,                 ITEMNF.QTDEDEVOLVIDO, ITEMNF.MOTIVODEVOLUCAO,                 CASE WHEN (ITEMNF.TABELAPRECO IS NULL) THEN NEW.TABELAPRECO ELSE ITEMNF.TABELAPRECO END,                 ITEMNF.COMISSAO, ITEMNF.COMBO, ITEMNF.VALORVENDA                 , ITEMNF.REGRADESCONTO                 FROM ITEMNF                 WHERE ITEMNF.NUMERO = NEW.NUMERO AND ITEMNF.FILIAL = NEW.FILIAL                 AND ITEMNF.SERIE = NEW.SERIE AND ITEMNF.ORIGEM = NEW.ORIGEM                 AND ITEMNF.CLIFOR = NEW.CLIFOR                 INTO :VARPRODUTO, :VARITEM, :VARQUANTIDADE, :VARUNITARIO, :VARDESCONTO, :VARTOTAL,                 :VARVALORICMS, :VARVALORIPI, :VARVALORPIS, :VARVALORCOFINS,                 :VARQUANTIDADEDEVOLVIDO, :VARMOTIVODEVOLUCAO,                 :VARTABELAPRECO, :VARPERCCOMISSAO, :VARCOMBO, :VARVALORVENDA                 , :VARREGRADESCONTO              DO BEGIN                 IF (:VARGERARESTOQUE = 'S') THEN BEGIN                    IF (NEW.PEDIDO IS NOT NULL) THEN BEGIN                        SELECT PEDIDOAUTORIZACAOFORNEC.LICITACAO, PEDIDOAUTORIZACAOFORNEC.AUTORIZACAO                        FROM PEDIDOAUTORIZACAOFORNEC                        WHERE PEDIDOAUTORIZACAOFORNEC.NUMERO = NEW.PEDIDO                        AND PEDIDOAUTORIZACAOFORNEC.FILIAL = NEW.FILIALPEDIDO                        INTO :VARLICITACAO, :VARAUTORIZACAO;                        IF (:VARLICITACAO IS NOT NULL) THEN BEGIN                            UPDATE ITEMAUTORIZACAOFORNECIMENTO                            SET ITEMAUTORIZACAOFORNECIMENTO.QTDEFATURADO = ITEMAUTORIZACAOFORNECIMENTO.QTDEFATURADO + :VARQUANTIDADE                            WHERE ITEMAUTORIZACAOFORNECIMENTO.LICITACAO = :VARLICITACAO                            AND ITEMAUTORIZACAOFORNECIMENTO.AUTORIZACAO = :VARAUTORIZACAO                            /*                            Nao tem informacao da identificacao do lote e item na nf e pedido                            AND ITEMAUTORIZACAOFORNECIMENTO.LOTE                            AND ITEMAUTORIZACAOFORNECIMENTO.ITEM                            */                            AND ITEMAUTORIZACAOFORNECIMENTO.PRODUTO = :VARPRODUTO;                        END                    END                    IF (:VARCONTROLALOTEVALIDADE = 'S') THEN BEGIN                        SELECT ESTOQUE.CONTROLARLOTEVALIDADE                        FROM ESTOQUE                        WHERE ESTOQUE.FILIAL = NEW.FILIAL AND ESTOQUE.PRODUTO = :VARPRODUTO                        INTO :VARCONTROLARLOTEVALIDADE;                        IF (:VARCONTROLARLOTEVALIDADE = 'S') THEN BEGIN                           FOR                               SELECT VALIDADEITEMNF.VALIDADE, VALIDADEITEMNF.LOTE, VALIDADEITEMNF.QTDE, VALIDADEITEMNF.FABRICACAO                               FROM VALIDADEITEMNF                               WHERE VALIDADEITEMNF.NUMERO = NEW.NUMERO AND VALIDADEITEMNF.FILIAL = NEW.FILIAL                               AND VALIDADEITEMNF.SERIE = NEW.SERIE AND VALIDADEITEMNF.ORIGEM = NEW.ORIGEM                               AND VALIDADEITEMNF.CLIFOR = NEW.CLIFOR AND VALIDADEITEMNF.PRODUTO = :VARPRODUTO                               AND VALIDADEITEMNF.ITEM = :VARITEM                               INTO :VARVALIDADE, :VARLOTE, :VARQTDE, :VARFABRICACAO                           DO BEGIN                              IF (:VARLOCALDESTINO IS NOT NULL) THEN                                INSERT INTO MOVIMENTOESTOQUE(MOVIMENTOESTOQUE.FILIAL, MOVIMENTOESTOQUE.PRODUTO, MOVIMENTOESTOQUE.QTDE, MOVIMENTOESTOQUE.VALIDADE, MOVIMENTOESTOQUE.LOTE, MOVIMENTOESTOQUE.TIPO, MOVIMENTOESTOQUE.OBS,                   MOVIMENTOESTOQUE.FABRICACAO, MOVIMENTOESTOQUE.IMPROPRIO, MOVIMENTOESTOQUE.INDICADORTIPOESTOQUE, MOVIMENTOESTOQUE.CLIFOR, MOVIMENTOESTOQUE.LOCAL)                                                    VALUES(NEW.FILIAL,              :VARPRODUTO,              (:VARQTDE),       :VARVALIDADE,              :VARLOTE,              'A-NF',                'ATUALIZADA NOTA FISCAL:'||NEW.NUMERO, :VARFABRICACAO,               :VARGERARESTOQUEIMPROPRIO, :VARINDICADORTIPOESTOQUE              , NEW.CLIFOR, :VARLOCALDESTINO);                              INSERT INTO MOVIMENTOESTOQUE(MOVIMENTOESTOQUE.FILIAL, MOVIMENTOESTOQUE.PRODUTO, MOVIMENTOESTOQUE.QTDE, MOVIMENTOESTOQUE.VALIDADE, MOVIMENTOESTOQUE.LOTE, MOVIMENTOESTOQUE.TIPO, MOVIMENTOESTOQUE.OBS,                   MOVIMENTOESTOQUE.FABRICACAO, MOVIMENTOESTOQUE.IMPROPRIO, MOVIMENTOESTOQUE.INDICADORTIPOESTOQUE, MOVIMENTOESTOQUE.CLIFOR, MOVIMENTOESTOQUE.LOCAL)                                                    VALUES(NEW.FILIAL,              :VARPRODUTO,              (:VARQTDE * -1),       :VARVALIDADE,              :VARLOTE,              'A-NF',                'ATUALIZADA NOTA FISCAL:'||NEW.NUMERO, :VARFABRICACAO,               :VARGERARESTOQUEIMPROPRIO, :VARINDICADORTIPOESTOQUE              , NEW.CLIFOR, :VARLOCALORIGEM);                           END /*FOR*/                        END ELSE BEGIN                            IF (:VARLOCALDESTINO IS NOT NULL) THEN                                INSERT INTO MOVIMENTOESTOQUE(MOVIMENTOESTOQUE.FILIAL, MOVIMENTOESTOQUE.PRODUTO, MOVIMENTOESTOQUE.QTDE, MOVIMENTOESTOQUE.TIPO, MOVIMENTOESTOQUE.OBS,                  MOVIMENTOESTOQUE.IMPROPRIO, MOVIMENTOESTOQUE.INDICADORTIPOESTOQUE, MOVIMENTOESTOQUE.CLIFOR, MOVIMENTOESTOQUE.LOCAL)                                                  VALUES(NEW.FILIAL,              :VARPRODUTO,              (:VARQUANTIDADE), 'A-NF',                'ATUALIZADA NOTA FISCAL:'||NEW.NUMERO, :VARGERARESTOQUEIMPROPRIO, :VARINDICADORTIPOESTOQUE, NEW.CLIFOR, :VARLOCALDESTINO);                            INSERT INTO MOVIMENTOESTOQUE(MOVIMENTOESTOQUE.FILIAL, MOVIMENTOESTOQUE.PRODUTO, MOVIMENTOESTOQUE.QTDE, MOVIMENTOESTOQUE.TIPO, MOVIMENTOESTOQUE.OBS,                  MOVIMENTOESTOQUE.IMPROPRIO, MOVIMENTOESTOQUE.INDICADORTIPOESTOQUE, MOVIMENTOESTOQUE.CLIFOR, MOVIMENTOESTOQUE.LOCAL)                                                  VALUES(NEW.FILIAL,              :VARPRODUTO,              (:VARQUANTIDADE * -1), 'A-NF',                'ATUALIZADA NOTA FISCAL:'||NEW.NUMERO, :VARGERARESTOQUEIMPROPRIO, :VARINDICADORTIPOESTOQUE, NEW.CLIFOR, :VARLOCALORIGEM);                        END                    END ELSE BEGIN                        IF (:VARLOCALDESTINO IS NOT NULL) THEN                            INSERT INTO MOVIMENTOESTOQUE(MOVIMENTOESTOQUE.FILIAL, MOVIMENTOESTOQUE.PRODUTO, MOVIMENTOESTOQUE.QTDE, MOVIMENTOESTOQUE.TIPO, MOVIMENTOESTOQUE.OBS,                  MOVIMENTOESTOQUE.IMPROPRIO, MOVIMENTOESTOQUE.INDICADORTIPOESTOQUE, MOVIMENTOESTOQUE.CLIFOR, MOVIMENTOESTOQUE.LOCAL)                                              VALUES(NEW.FILIAL,              :VARPRODUTO,              (:VARQUANTIDADE),        'A-NF',         'ATUALIZADA NOTA FISCAL:'||NEW.NUMERO, :VARGERARESTOQUEIMPROPRIO, :VARINDICADORTIPOESTOQUE, NEW.CLIFOR, :VARLOCALDESTINO);                        INSERT INTO MOVIMENTOESTOQUE(MOVIMENTOESTOQUE.FILIAL, MOVIMENTOESTOQUE.PRODUTO, MOVIMENTOESTOQUE.QTDE, MOVIMENTOESTOQUE.TIPO, MOVIMENTOESTOQUE.OBS,                  MOVIMENTOESTOQUE.IMPROPRIO, MOVIMENTOESTOQUE.INDICADORTIPOESTOQUE, MOVIMENTOESTOQUE.CLIFOR, MOVIMENTOESTOQUE.LOCAL)                                              VALUES(NEW.FILIAL,              :VARPRODUTO,              (:VARQUANTIDADE * -1),        'A-NF',         'ATUALIZADA NOTA FISCAL:'||NEW.NUMERO, :VARGERARESTOQUEIMPROPRIO, :VARINDICADORTIPOESTOQUE, NEW.CLIFOR, :VARLOCALORIGEM);                    END                    /*NSU*/                    IF (:VARUTILIZANSU = 'S') THEN BEGIN                       SELECT ESTOQUE.ESTOQUEATUAL FROM ESTOQUE                       WHERE ESTOQUE.PRODUTO = :VARPRODUTO AND ESTOQUE.FILIAL = NEW.FILIAL                       INTO :VARESTOQUEATUAL;                       IF (:VARESTOQUEATUAL < 0) THEN BEGIN                           SELECT NSU                           FROM PROCEDURE_OBTERNSU(NEW.FILIAL, NEW.NUMERO, NEW.SERIE)                           INTO :VARNSU;                           SELECT MAX(NSUREINICIO.CODIGO) FROM NSUREINICIO                           WHERE NSUREINICIO.FILIAL = NEW.FILIAL                           INTO :VARREINICIO;                           SELECT COUNT(*) AS CONTADOR FROM NSUESTOQUE                           WHERE NSUESTOQUE.NSU = :VARNSU AND NSUESTOQUE.REINICIO = :VARREINICIO                           AND NSUESTOQUE.FILIAL = NEW.FILIAL AND NSUESTOQUE.PRODUTO = :VARPRODUTO                           INTO :VARCONTADOR;                           IF (:VARCONTADOR IS NULL) THEN BEGIN                              INSERT INTO NSUESTOQUE (NSUESTOQUE.NSU, NSUESTOQUE.REINICIO, NSUESTOQUE.FILIAL, NSUESTOQUE.PRODUTO, NSUESTOQUE.SALDO, NSUESTOQUE.DATA)                                              VALUES (:VARNSU, :VARREINICIO, NEW.FILIAL, :VARPRODUTO, :VARESTOQUEATUAL, CAST('NOW' AS TIMESTAMP));                           END ELSE BEGIN                              UPDATE NSUESTOQUE SET NSUESTOQUE.SALDO = :VARESTOQUEATUAL                              WHERE NSUESTOQUE.NSU = :VARNSU AND NSUESTOQUE.REINICIO = :VARREINICIO                              AND NSUESTOQUE.FILIAL = NEW.FILIAL AND NSUESTOQUE.PRODUTO = :VARPRODUTO;                           END                       END                    END                 END /*Final Gerar Estoque*/                 /*Gerar Consumo*/                 IF (:VARGERARCONSUMO = 'S') THEN BEGIN                    SELECT CASE WHEN (FILIAL.UTILIZARCUSTOBRUTO = 'S') THEN ESTOQUE.VALORCUSTOBRUTO ELSE ESTOQUE.VALORMEDIO END                    FROM ESTOQUE                    INNER JOIN FILIAL ON FILIAL.CODIGO = ESTOQUE.FILIAL                    WHERE ESTOQUE.PRODUTO = :VARPRODUTO AND ESTOQUE.FILIAL = NEW.FILIAL                    INTO :VARCUSTO;                    IF (:VARCUSTO = 0) THEN                       SELECT ESTOQUE.VALORCUSTO FROM ESTOQUE                       WHERE ESTOQUE.PRODUTO = :VARPRODUTO AND ESTOQUE.FILIAL = NEW.FILIAL                       INTO :VARCUSTO;                    IF (:VARCUSTO = 0) THEN                       SELECT ESTOQUE.VALORCUSTOTABELA FROM ESTOQUE                       WHERE ESTOQUE.PRODUTO = :VARPRODUTO AND ESTOQUE.FILIAL = NEW.FILIAL                       INTO :VARCUSTO;                    /*Inicio Gerar Comissao*/                    IF (:VARGERARCOMISSAO = 'S') THEN BEGIN                        SELECT PROCEDURE_CALCULAR_COMISSAO.VALORCOMISSAO, PROCEDURE_CALCULAR_COMISSAO.PERCCOMISSAO                        FROM PROCEDURE_CALCULAR_COMISSAO(NEW.FILIAL, NEW.TIPOCFOP, NEW.FUNCIONARIO, :VARPRODUTO,                        :VARTABELAPRECO, NEW.CLIFOR, NEW.FORMAPAGAMENTO, NEW.CONDICAOPAGAMENTO,                        :VARQUANTIDADE, :VARUNITARIO, :VARVALORVENDA, :VARDESCONTO, :VARTOTAL, NEW.COMISSAO, :VARPERCCOMISSAO, :VARCOMBO)                        INTO :VARVALORCOMISSAO, :VARPERCCOMISSAO;                    END ELSE BEGIN                        VARPERCCOMISSAO = 0;                        VARVALORCOMISSAO = 0;                    END                    VARPERCCOMISSAOENTREGA = 0;                    /*Comissao entregas - Transportador*/                    SELECT TRANSPORTADOR.COMISSAO FROM TRANSPORTADOR                    WHERE TRANSPORTADOR.CODIGO = NEW.TRANSPORTADOR                    INTO :VARPERCCOMISSAOENTREGA;                    IF (:VARPERCCOMISSAOENTREGA IS NULL) THEN                    VARPERCCOMISSAOENTREGA = 0;                    /*Comissao Entrega - Cidade*/                    VARPERC = 0;                    SELECT CIDADE.COMISSAOENTREGA FROM CIDADE                    WHERE CIDADE.CODIGO  = :VARCIDADE INTO :VARPERC;                    IF (:VARPERC IS NULL) THEN VARPERC = 0;                    VARPERCCOMISSAOENTREGA = :VARPERCCOMISSAOENTREGA + :VARPERC;                    /*Comissao de entrega por grupo*/                    SELECT GRUPO.COMISSAOENTREGA FROM PRODUTO                    INNER JOIN GRUPO ON GRUPO.CODIGO = PRODUTO.GRUPO                    WHERE PRODUTO.CODIGO = :VARPRODUTO                    INTO :VARPERC;                    IF (:VARPERC IS NULL) THEN VARPERC = 0;                    VARPERCCOMISSAOENTREGA = :VARPERCCOMISSAOENTREGA + :VARPERC;                    /*Gerar Bonificacao*/                    IF (:VARGERARBONIFICACAO = 'S') THEN BEGIN                       INSERT INTO BONIFICACAO(BONIFICACAO.FILIAL, BONIFICACAO.TIPO, BONIFICACAO.DOCUMENTO, BONIFICACAO.PRODUTO, BONIFICACAO.DATA, BONIFICACAO.QTDE, BONIFICACAO.UNITARIO, BONIFICACAO.CLIFOR, BONIFICACAO.VENDEDOR, BONIFICACAO.CUSTO, BONIFICACAO.TRANSPORTADOR, BONIFICACAO.VEICULO)                       VALUES (NEW.FILIAL,'NF', NEW.NUMERO, :VARPRODUTO, NEW.EMISSAO, :VARQUANTIDADE, :VARUNITARIO, NEW.CLIFOR, NEW.FUNCIONARIO, :VARCUSTO, NEW.TRANSPORTADOR, NEW.VEICULO);                    END                    IF (:VARZERARUNITARIO = 'S') THEN BEGIN                       VARUNITARIO = 0;                       VARDESCONTO = 0;                       VARPERCCOMISSAO = 0;                       VARVALORCOMISSAO = 0;                    END                    /* Imposto ICMS compor margem Ticket 5477 */                    SELECT IMPOSTO.DEBITOICMSCOMPORMARGEM FROM IMPOSTO                        INNER JOIN CIDADE ON CIDADE.CODIGO = :VARCIDADE                        INNER JOIN PRODUTO ON PRODUTO.CODIGO = :VARPRODUTO                        INNER JOIN TIPOCFOP ON TIPOCFOP.CODIGO = NEW.TIPOCFOP                        WHERE IMPOSTO.TRIBUTACAO = PRODUTO.TRIBUTACAO                                                   AND IMPOSTO.ESTADO = CIDADE.ESTADO                        AND IMPOSTO.FILIAL = NEW.FILIAL                        AND IMPOSTO.NATUREZAOPERACAO = TIPOCFOP.NATUREZAOPERACAO                    INTO :VARDEBITOICMSCOMPORMARGEM;                    IF (:VARDEBITOICMSCOMPORMARGEM = 'N') THEN                        VARVALORICMS = 0;                    /*Gerar Consumo*/                    INSERT INTO CONSUMO(CONSUMO.FILIAL, CONSUMO.TIPO, CONSUMO.DOCUMENTO, CONSUMO.PRODUTO, CONSUMO.DATA, CONSUMO.QTDE, CONSUMO.UNITARIO, CONSUMO.VALORDESCONTO, CONSUMO.CUSTO, CONSUMO.DESPESA, CONSUMO.ENCARGO, CONSUMO.COMISSAO, CONSUMO.CLIFOR, CONSUMO.VENDEDOR, CONSUMO.QTDEDEVOLVIDO, CONSUMO.MOTIVODEVOLUCAO, CONSUMO.TRANSPORTADOR, CONSUMO.VALORVENDA, CONSUMO.GERARFLEX, CONSUMO.TABELAPRECO, CONSUMO.FORMAPAGAMENTO, CONSUMO.CONDICAOPAGAMENTO, CONSUMO.COMISSAOENTREGA, CONSUMO.VEICULO, CONSUMO.VALORICMS, CONSUMO.VALORIPI, CONSUMO.VALORPIS, CONSUMO.VALORCOFINS, CONSUMO.COMBO, CONSUMO.ROTA, CONSUMO.REGRADESCONTO)                    VALUES (NEW.FILIAL,'NF',NEW.NUMERO,:VARPRODUTO, NEW.EMISSAO, :VARQUANTIDADE, :VARUNITARIO, :VARDESCONTO,:VARCUSTO, (((:VARUNITARIO * :VARQUANTIDADE) - :VARDESCONTO) * (:VARDESPESA/100.0)), (((:VARUNITARIO * :VARQUANTIDADE) - :VARDESCONTO) * (:VARENCARGO/100.0)), :VARVALORCOMISSAO, NEW.CLIFOR, NEW.FUNCIONARIO, :VARQUANTIDADEDEVOLVIDO, :VARMOTIVODEVOLUCAO, NEW.TRANSPORTADOR, :VARVALORVENDA, :VARGERARFLEX, :VARTABELAPRECO, NEW.FORMAPAGAMENTO, NEW.CONDICAOPAGAMENTO, (((:VARUNITARIO * :VARQUANTIDADE) - :VARDESCONTO)* (:VARPERCCOMISSAOENTREGA/100.0)), NEW.VEICULO, :VARVALORICMS, :VARVALORIPI, :VARVALORPIS, :VARVALORCOFINS, :VARCOMBO, NEW.ROTA, :VARREGRADESCONTO);                 END/*Final Consumo*/              END /*Fim For estoque*/              IF (:VARGERARFINANCEIRO = 'S') THEN BEGIN                 /*Comissao*/                 IF (:GERARCOMISSAOFINANCEIRO = 'S') THEN                 BEGIN                     SELECT (SUM(CONSUMO.COMISSAOUNITARIA * CONSUMO.QTDE) / SUM((CONSUMO.UNITARIO * CONSUMO.QTDE) - CONSUMO.VALORDESCONTO))*100.0                        FROM CONSUMO WHERE CONSUMO.DOCUMENTO = NEW.NUMERO AND CONSUMO.TIPO = 'NF' AND CONSUMO.DATA = NEW.EMISSAO AND CONSUMO.CLIFOR = NEW.CLIFOR AND CONSUMO.FILIAL = NEW.FILIAL                        INTO :VARPERCCOMISSAO;                 END                 ELSE                     VARPERCCOMISSAO = NEW.COMISSAO;                 /*Baixar documentos vinculados financeiro*/                 FOR                    SELECT FINANCEIRONF.ORDEM, FINANCEIRONF.DATAEMISSAO FROM FINANCEIRONF                    WHERE FINANCEIRONF.NUMERO = NEW.NUMERO                    AND FINANCEIRONF.SERIE = NEW.SERIE                    AND FINANCEIRONF.FILIAL = NEW.FILIAL                    AND FINANCEIRONF.ORIGEM = NEW.ORIGEM                    AND FINANCEIRONF.CLIFOR = NEW.CLIFOR                    INTO :VARORDEM, :VARDATAEMISSAO                 DO BEGIN                    UPDATE FINANCEIRO                    SET FINANCEIRO.DATABAIXA = NEW.EMISSAO, FINANCEIRO.VALORBAIXA = FINANCEIRO.VALOR                    WHERE FINANCEIRO.CLIFOR = NEW.CLIFOR                    AND FINANCEIRO.ORDEM = :VARORDEM                    AND FINANCEIRO.DATAEMISSAO = :VARDATAEMISSAO;                 END                 /*Insererir ordens*/                 FOR                    SELECT ORDEMNF.ORDEM, ORDEMNF.VCTO, ORDEMNF.VALOR, ORDEMNF.HISTORICO, ORDEMNF.CONTA                    FROM ORDEMNF                    WHERE ORDEMNF.NUMERO = NEW.NUMERO AND ORDEMNF.FILIAL = NEW.FILIAL                    AND ORDEMNF.SERIE = NEW.SERIE AND ORDEMNF.ORIGEM = NEW.ORIGEM                    AND ORDEMNF.CLIFOR = NEW.CLIFOR                    ORDER BY ORDEMNF.VCTO DESC                    INTO :VARORDEM, :VARVCTO,:VARVALOR, :VARHISTORICO, :VARCONTAORDEM                 DO BEGIN                    /*Conceder Desconto*/                    VARVALORDESCONTOCONCEDIDO = NULL;                    IF (:VARFINANCEIROCONCEDERDESCONTO = 'S') THEN BEGIN                       SELECT CONDICAOPAGAMENTO.VEZES, CONDICAOPAGAMENTO.CONCEDERDESCONTO                       FROM CONDICAOPAGAMENTO                       WHERE CONDICAOPAGAMENTO.CODIGO = NEW.CONDICAOPAGAMENTO                       INTO :VARVEZES, :VARCONCEDERDESCONTO;                       IF (:VARCONCEDERDESCONTO = 'S') THEN BEGIN                            IF (:VARVEZES > 1) THEN BEGIN                                VARVALORDESCONTOCONCEDIDO = ((NEW.TOTALPRODUTO * (:VARPERCDESCONTOCONCEDIDO/100.0)) / :VARVEZES);                            END ELSE BEGIN                                VARVALORDESCONTOCONCEDIDO = (NEW.TOTALPRODUTO * (:VARPERCDESCONTOCONCEDIDO/100.0));                            END                       END                    END                    --Desconto Rapel                    IF ((:VARRAPEL <> 0) AND(:VARRAPELDESCONTARVALORITEM = 'N')) THEN BEGIN                       IF (:VARVALORDESCONTOCONCEDIDO IS NULL) THEN BEGIN                            VARVALORDESCONTOCONCEDIDO = (:VARVALOR * (:VARRAPEL / 100.0));                        END ELSE BEGIN                            VARVALORDESCONTOCONCEDIDO = VARVALORDESCONTOCONCEDIDO + (:VARVALOR * (:VARRAPEL / 100.0));                        END                    END                    /*Inicializa com a conta padrao*/                    VARCONTA = :VARCONTAFILIAL;                    /*Baixa automatica pela forma de pagamento*/                    SELECT FORMAPAGAMENTO.BAIXAR, FORMAPAGAMENTO.CONTA FROM FORMAPAGAMENTO                    WHERE FORMAPAGAMENTO.CODIGO = NEW.FORMAPAGAMENTO                    INTO :VARBAIXAR, :VARFORMACONTA;                    IF (:VARFORMACONTA IS NOT NULL) THEN                        VARCONTA = :VARFORMACONTA;                    /*Conta definida na ordem, prevalesse sobre as forma e padrao da filial*/                    IF (:VARCONTAORDEM IS NOT NULL) THEN                        VARCONTA = :VARCONTAORDEM;                    /*Parametro condicao de pagamento*/                    SELECT CONDICAOPAGAMENTO.PRIMEIROVCTO FROM CONDICAOPAGAMENTO                    WHERE CONDICAOPAGAMENTO.CODIGO = NEW.CONDICAOPAGAMENTO INTO :VARPRIMEIROVCTO;                    VARPARCELA = NULL;                    IF (:VARFINANCEIROGERAROBSPARCELA = 'S') THEN BEGIN                        IF (POSITION('-' IN :VARORDEM)>0) THEN BEGIN                            IF (:VARVEZES IS NULL) THEN BEGIN                                SELECT CONDICAOPAGAMENTO.VEZES                                FROM CONDICAOPAGAMENTO                                WHERE CONDICAOPAGAMENTO.CODIGO = NEW.CONDICAOPAGAMENTO                                INTO :VARVEZES;                            END                            VARPARCELA = 'PARCELA:'||SUBSTRING(:VARORDEM FROM POSITION('-' IN :VARORDEM) + 1 FOR 4) || '/' || :VARVEZES;                        END                    END                    IF (:VARBAIXAR = 'S') THEN BEGIN                       IF (:VARTIPODATABAIXA = 'E') THEN BEGIN                           VARDATABAIXA = NEW.EMISSAO;                       END ELSE BEGIN                           VARDATABAIXA = :VARVCTO;                       END                       IF (:VARGERARCAIXA = 'N') THEN BEGIN                          INSERT INTO FINANCEIRO (CLIFOR, ORDEM, VALOR, DATAEMISSAO, DATAVCTO, DATABAIXA, VALORBAIXA, DOCUMENTO, TIPO, FORMAPAGAMENTO, FILIAL, HISTORICO, SITUACAO, CONTA, VENDEDOR, COMISSAO, DESCONTO, VALORDOCUMENTO, OBS)                          VALUES (NEW.CLIFOR, :VARORDEM, :VARVALOR, NEW.EMISSAO, :VARVCTO, :VARDATABAIXA, :VARVALOR, NEW.NUMERO, 'C', NEW.FORMAPAGAMENTO, NEW.FILIAL, NULL, :VARSITUACAO, NULL, NEW.FUNCIONARIO, :VARPERCCOMISSAO, :VARVALORDESCONTOCONCEDIDO, NEW.TOTAL, :VARPARCELA);                       END ELSE BEGIN                          INSERT INTO FINANCEIRO (CLIFOR, ORDEM, VALOR, DATAEMISSAO, DATAVCTO, DATABAIXA, VALORBAIXA, DOCUMENTO, TIPO, CAIXA,  FORMAPAGAMENTO, FILIAL, HISTORICO, SITUACAO, CONTA, VENDEDOR, COMISSAO, DESCONTO, VALORDOCUMENTO, OBS)                          VALUES (NEW.CLIFOR, :VARORDEM, :VARVALOR, NEW.EMISSAO, :VARVCTO, :VARDATABAIXA, :VARVALOR, NEW.NUMERO, 'C',NULL, NEW.FORMAPAGAMENTO, NEW.FILIAL, :VARHISTORICO, :VARSITUACAO, :VARCONTA, NEW.FUNCIONARIO, :VARPERCCOMISSAO, :VARVALORDESCONTOCONCEDIDO, NEW.TOTAL, :VARPARCELA);                       END                    END ELSE BEGIN                        IF (NEW.EMISSAO <> :VARVCTO) THEN BEGIN                           INSERT INTO FINANCEIRO (CLIFOR, ORDEM, VALOR, DATAEMISSAO, DATAVCTO, DOCUMENTO, TIPO, FORMAPAGAMENTO, FILIAL, HISTORICO, SITUACAO, CONTA, VENDEDOR, COMISSAO, DESCONTO, VALORDOCUMENTO, OBS)                           VALUES (NEW.CLIFOR, :VARORDEM, :VARVALOR, NEW.EMISSAO, :VARVCTO, NEW.NUMERO, 'C', NEW.FORMAPAGAMENTO, NEW.FILIAL, :VARHISTORICO, :VARSITUACAO, :VARCONTA, NEW.FUNCIONARIO, :VARPERCCOMISSAO, :VARVALORDESCONTOCONCEDIDO, NEW.TOTAL, :VARPARCELA);                        END ELSE BEGIN                           IF (:VARPRIMEIROVCTO <> 0) THEN BEGIN                              INSERT INTO FINANCEIRO (CLIFOR, ORDEM, VALOR, DATAEMISSAO, DATAVCTO, DOCUMENTO, TIPO, FORMAPAGAMENTO, FILIAL, HISTORICO, SITUACAO, CONTA, VENDEDOR, COMISSAO, DESCONTO, VALORDOCUMENTO, OBS)                              VALUES (NEW.CLIFOR, :VARORDEM, :VARVALOR, NEW.EMISSAO, :VARVCTO, NEW.NUMERO, 'C', NEW.FORMAPAGAMENTO, NEW.FILIAL, :VARHISTORICO, :VARSITUACAO, :VARCONTA, NEW.FUNCIONARIO, :VARPERCCOMISSAO, :VARVALORDESCONTOCONCEDIDO, NEW.TOTAL, :VARPARCELA);                           END ELSE BEGIN                              IF (:VARGERARCAIXA = 'N') THEN BEGIN                                 INSERT INTO FINANCEIRO (CLIFOR, ORDEM, VALOR, DATAEMISSAO, DATAVCTO, DATABAIXA, VALORBAIXA, DOCUMENTO, TIPO, FORMAPAGAMENTO, FILIAL, HISTORICO, SITUACAO,  CONTA, VENDEDOR, COMISSAO, DESCONTO, VALORDOCUMENTO, OBS)                                 VALUES (NEW.CLIFOR, :VARORDEM, :VARVALOR, NEW.EMISSAO, :VARVCTO, :VARVCTO, :VARVALOR, NEW.NUMERO, 'C', NEW.FORMAPAGAMENTO, NEW.FILIAL, NULL, :VARSITUACAO, NULL, NEW.FUNCIONARIO, :VARPERCCOMISSAO, :VARVALORDESCONTOCONCEDIDO, NEW.TOTAL, :VARPARCELA);                              END ELSE BEGIN                                 INSERT INTO FINANCEIRO (CLIFOR, ORDEM, VALOR, DATAEMISSAO, DATAVCTO, DATABAIXA, VALORBAIXA, DOCUMENTO, TIPO, CAIXA,  FORMAPAGAMENTO, FILIAL, HISTORICO, SITUACAO, CONTA, VENDEDOR, COMISSAO, DESCONTO, VALORDOCUMENTO, OBS)                                 VALUES(NEW.CLIFOR, :VARORDEM, :VARVALOR, NEW.EMISSAO, :VARVCTO, :VARVCTO, :VARVALOR, NEW.NUMERO, 'C',NULL, NEW.FORMAPAGAMENTO, NEW.FILIAL, :VARHISTORICO, :VARSITUACAO, :VARCONTA, NEW.FUNCIONARIO, :VARPERCCOMISSAO, :VARVALORDESCONTOCONCEDIDO, NEW.TOTAL, :VARPARCELA);                              END                           END                        END                    END                 END /*Fim For Financeiro*/              END /*Fim Gerar Financeiro*/           END        END/*Final Nota Fiscal de Saida*/     END/*Final Nota Fiscal de Saida*/END^SET TERM ; ^